{"version":3,"sources":["webpack:///./src/scss/library/mixins/_mixins.scss","webpack:///./src/scss/styles.scss","webpack:///./src/scss/state/_states.scss","webpack:///./src/scss/components/_form_elements.scss"],"names":[],"mappings":"AA2CA;;;;;;;;;;;;GC/BE;ACZF;EACE,cAAa;;ACAf;EACE,qBAAa;EAAb,qBAAa;EAAb,cAAa;EACb,+BAAmB;EAAnB,8BAAmB;MAAnB,wBAAmB;UAAnB,oBAAmB;EACnB,YAAW;EACX,uBAAqB;MAArB,oBAAqB;UAArB,sBAAqB;EAJvB;IAMI,kCAAiC;IACjC,eAAc;IACd,iBAAgB;IAChB,mCAAkC;IAClC,iBAAgB;IAChB,YAAW;IACX,kCAAiC;IACjC,qBAAc;QAAd,eAAc;IACd,cAAa;EAdjB;IAiBI,eAAc;IACd,oCAAmC","file":"css/styles.min.css","sourcesContent":["// Function nounit strips any unit from variable.\n@function nounit($number) {\n  @return $number / ($number * 0 + 1);\n}\n\n// Calculate rem (root em) units from pixels for font-size and line-height.\n@mixin font-size($font-size, $line-height: \"\") {\n  @if $font-size == 'inherit' {\n    @error 'No inherit values allowed in font-size mixin!';\n  } @else if unit($font-size) == 'rem' {\n    font-size: $font-size;\n  } @else {\n    font-size: ($font-size / $base-font-size) * 1rem;\n  }\n\n  // Handle the line-height.\n  @if $line-height != \"\" {\n    // Check if line-height is in px.\n    @if unit($line-height) == 'px' {\n      line-height: ($line-height / $base-font-size) * 1rem;\n    }\n    @else {\n      // Check if line-height is in rem and handle the line-height.\n      @if unit($line-height) == 'rem' {\n        line-height: $line-height;\n      }\n      // The line-height is a multiplier.\n      @else {\n        $font-size-px: nounit($font-size);\n        $base-font-size-px: nounit($base-font-size);\n\n        // Convert the font-size if it is in rem.\n        @if unit($font-size) == 'rem' {\n          $font-size-px: nounit($font-size) * nounit($base-font-size);\n        }\n\n        $conversion: $base-font-size-px * ($font-size-px / $base-font-size-px) * $line-height / $base-font-size-px;\n        line-height: #{$conversion}rem;\n      }\n    }\n  }\n}\n\n/**\n * To give different styles depending on how many items a wrapper has you can use this mixing to assign the styles\n * to correct element. For example:\n *\n * If the wrapper has 1, 2 or 3 items make the items 30% wide, otherwise they should be 20% wide:\n * .wrapper .item {\n *   width: 20%;\n *\n *   @include content_count(1, 2, 3) {\n *     width: 30%;\n *   }\n * }\n */\n@mixin content_count($number_of_items...) {\n  @each $item in $number_of_items {\n    @if type-of($item) == number {\n      @for $i from 1 through $item {\n        &:nth-child(#{$i}):nth-last-child(#{$item - $i + 1}) {\n          @content;\n        }\n      }\n    }\n  }\n}\n","//\n// @file\n// This file includes all imports\n//\n\n@import \"~breakpoint-sass\";\n\n@import \"library/variables/*.*\";\n@import \"library/mixins/*.*\";\n@import \"layout/*\";\n@import \"state/*\";\n@import \"base/**/*.*\";\n@import \"components/**/*.*\";\n",".is-hidden {\n  display: none;\n}\n","\n.webform-section {\n  display: flex;\n  flex-flow: row wrap;\n  width: 100%;\n  justify-content: left;\n  > h2.webform-section-title {\n    color: var(--label-color-default);\n    display: block;\n    font-weight: 500;\n    margin-bottom: var(--spacing-3-xs);\n    max-width: 400px;\n    width: 100%;\n    font-size: var(--fontsize-body-l);\n    flex-shrink: 0;\n    margin-top: 0;\n  }\n  > div.webform-section-wrapper {\n    min-width: 50%;\n    padding-left: var(--spacing-triple);\n  }\n}\n"],"sourceRoot":""}