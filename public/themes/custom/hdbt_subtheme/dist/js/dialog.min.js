/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/dialog.js":
/*!**************************!*\
  !*** ./src/js/dialog.js ***!
  \**************************/
/***/ (function() {

eval("/**\n * DO NOT EDIT THIS FILE.\n * See the following change record for more information,\n * https://www.drupal.org/node/2815083\n * @preserve\n **/\n\n(function ($, Drupal, drupalSettings) {\n  drupalSettings.dialog = {\n    autoOpen: true,\n    dialogClass: '',\n    buttonClass: 'button',\n    buttonPrimaryClass: 'button--primary',\n    close: function close(event) {\n      Drupal.dialog(event.target).close();\n      Drupal.detachBehaviors(event.target, null, 'unload');\n    }\n  };\n  Drupal.dialog = function (element, options) {\n    var undef;\n    var $element = $(element);\n    var dialog = {\n      open: false,\n      returnValue: undef\n    };\n    function openDialog(settings) {\n      settings = $.extend({}, drupalSettings.dialog, options, settings);\n      $(window).trigger('dialog:beforecreate', [dialog, $element, settings]);\n      $element.dialog(settings);\n      dialog.open = true;\n      $(window).trigger('dialog:aftercreate', [dialog, $element, settings]);\n    }\n    function closeDialog(value) {\n      $(window).trigger('dialog:beforeclose', [dialog, $element]);\n      $element.dialog('close');\n      dialog.returnValue = value;\n      dialog.open = false;\n      $(window).trigger('dialog:afterclose', [dialog, $element]);\n    }\n    dialog.show = function () {\n      openDialog({\n        modal: false\n      });\n    };\n    dialog.showModal = function () {\n      openDialog({\n        modal: true\n      });\n    };\n    dialog.close = closeDialog;\n    return dialog;\n  };\n})(jQuery, Drupal, drupalSettings);\n(function (factory) {\n  \"use strict\";\n\n  if (true) {\n    factory(jQuery);\n  } else {}\n})(function ($) {\n  \"use strict\";\n\n  $.widget(\"ui.dialog\", {\n    version: \"1.13.2\",\n    options: {\n      appendTo: \"body\",\n      autoOpen: true,\n      buttons: [],\n      classes: {\n        \"ui-dialog\": \"ui-corner-all\",\n        \"ui-dialog-titlebar\": \"ui-corner-all\"\n      },\n      closeOnEscape: true,\n      closeText: \"Close\",\n      draggable: true,\n      hide: null,\n      height: \"auto\",\n      maxHeight: null,\n      maxWidth: null,\n      minHeight: 150,\n      minWidth: 150,\n      modal: false,\n      position: {\n        my: \"center\",\n        at: \"center\",\n        of: window,\n        collision: \"fit\",\n        // Ensure the titlebar is always visible\n        using: function (pos) {\n          var topOffset = $(this).css(pos).offset().top;\n          if (topOffset < 0) {\n            $(this).css(\"top\", pos.top - topOffset);\n          }\n        }\n      },\n      resizable: true,\n      show: null,\n      title: null,\n      width: 300,\n      // Callbacks\n      beforeClose: null,\n      close: null,\n      drag: null,\n      dragStart: null,\n      dragStop: null,\n      focus: null,\n      open: null,\n      resize: null,\n      resizeStart: null,\n      resizeStop: null\n    },\n    sizeRelatedOptions: {\n      buttons: true,\n      height: true,\n      maxHeight: true,\n      maxWidth: true,\n      minHeight: true,\n      minWidth: true,\n      width: true\n    },\n    resizableRelatedOptions: {\n      maxHeight: true,\n      maxWidth: true,\n      minHeight: true,\n      minWidth: true\n    },\n    _create: function () {\n      this.originalCss = {\n        display: this.element[0].style.display,\n        width: this.element[0].style.width,\n        minHeight: this.element[0].style.minHeight,\n        maxHeight: this.element[0].style.maxHeight,\n        height: this.element[0].style.height\n      };\n      this.originalPosition = {\n        parent: this.element.parent(),\n        index: this.element.parent().children().index(this.element)\n      };\n      this.originalTitle = this.element.attr(\"title\");\n      if (this.options.title == null && this.originalTitle != null) {\n        this.options.title = this.originalTitle;\n      }\n\n      // Dialogs can't be disabled\n      if (this.options.disabled) {\n        this.options.disabled = false;\n      }\n      this._createWrapper();\n      this.element.show().removeAttr(\"title\").appendTo(this.uiDialog);\n      this._addClass(\"ui-dialog-content\", \"ui-widget-content\");\n      this._createTitlebar();\n      this._createKoro();\n      this._createButtonPane();\n      if (this.options.draggable && $.fn.draggable) {\n        this._makeDraggable();\n      }\n      if (this.options.resizable && $.fn.resizable) {\n        this._makeResizable();\n      }\n      this._isOpen = false;\n      this._trackFocus();\n    },\n    _init: function () {\n      if (this.options.autoOpen) {\n        this.open();\n      }\n    },\n    _appendTo: function () {\n      var element = this.options.appendTo;\n      if (element && (element.jquery || element.nodeType)) {\n        return $(element);\n      }\n      return this.document.find(element || \"body\").eq(0);\n    },\n    _destroy: function () {\n      var next,\n        originalPosition = this.originalPosition;\n      this._untrackInstance();\n      this._destroyOverlay();\n      this.element.removeUniqueId().css(this.originalCss)\n\n      // Without detaching first, the following becomes really slow\n      .detach();\n      this.uiDialog.remove();\n      if (this.originalTitle) {\n        this.element.attr(\"title\", this.originalTitle);\n      }\n      next = originalPosition.parent.children().eq(originalPosition.index);\n\n      // Don't try to place the dialog next to itself (#8613)\n      if (next.length && next[0] !== this.element[0]) {\n        next.before(this.element);\n      } else {\n        originalPosition.parent.append(this.element);\n      }\n    },\n    widget: function () {\n      return this.uiDialog;\n    },\n    disable: $.noop,\n    enable: $.noop,\n    close: function (event) {\n      var that = this;\n      if (!this._isOpen || this._trigger(\"beforeClose\", event) === false) {\n        return;\n      }\n      this._isOpen = false;\n      this._focusedElement = null;\n      this._destroyOverlay();\n      this._untrackInstance();\n      if (!this.opener.filter(\":focusable\").trigger(\"focus\").length) {\n        // Hiding a focused element doesn't trigger blur in WebKit\n        // so in case we have nothing to focus on, explicitly blur the active element\n        // https://bugs.webkit.org/show_bug.cgi?id=47182\n        $.ui.safeBlur($.ui.safeActiveElement(this.document[0]));\n      }\n      this._hide(this.uiDialog, this.options.hide, function () {\n        that._trigger(\"close\", event);\n      });\n    },\n    isOpen: function () {\n      return this._isOpen;\n    },\n    moveToTop: function () {\n      this._moveToTop();\n    },\n    _moveToTop: function (event, silent) {\n      var moved = false,\n        zIndices = this.uiDialog.siblings(\".ui-front:visible\").map(function () {\n          return +$(this).css(\"z-index\");\n        }).get(),\n        zIndexMax = Math.max.apply(null, zIndices);\n      if (zIndexMax >= +this.uiDialog.css(\"z-index\")) {\n        this.uiDialog.css(\"z-index\", zIndexMax + 1);\n        moved = true;\n      }\n      if (moved && !silent) {\n        this._trigger(\"focus\", event);\n      }\n      return moved;\n    },\n    open: function () {\n      var that = this;\n      if (this._isOpen) {\n        if (this._moveToTop()) {\n          this._focusTabbable();\n        }\n        return;\n      }\n      this._isOpen = true;\n      this.opener = $($.ui.safeActiveElement(this.document[0]));\n      this._size();\n      this._position();\n      this._createOverlay();\n      this._moveToTop(null, true);\n\n      // Ensure the overlay is moved to the top with the dialog, but only when\n      // opening. The overlay shouldn't move after the dialog is open so that\n      // modeless dialogs opened after the modal dialog stack properly.\n      if (this.overlay) {\n        this.overlay.css(\"z-index\", this.uiDialog.css(\"z-index\") - 1);\n      }\n      this._show(this.uiDialog, this.options.show, function () {\n        that._focusTabbable();\n        that._trigger(\"focus\");\n      });\n\n      // Track the dialog immediately upon opening in case a focus event\n      // somehow occurs outside of the dialog before an element inside the\n      // dialog is focused (#10152)\n      this._makeFocusTarget();\n      this._trigger(\"open\");\n    },\n    _focusTabbable: function () {\n      // Set focus to the first match:\n      // 1. An element that was focused previously\n      // 2. First element inside the dialog matching [autofocus]\n      // 3. Tabbable element inside the content element\n      // 4. Tabbable element inside the buttonpane\n      // 5. The close button\n      // 6. The dialog itself\n      var hasFocus = this._focusedElement;\n      if (!hasFocus) {\n        hasFocus = this.element.find(\"[autofocus]\");\n      }\n      if (!hasFocus.length) {\n        hasFocus = this.element.find(\":tabbable\");\n      }\n      if (!hasFocus.length) {\n        hasFocus = this.uiDialogButtonPane.find(\":tabbable\");\n      }\n      if (!hasFocus.length) {\n        hasFocus = this.uiDialogTitlebarClose.filter(\":tabbable\");\n      }\n      if (!hasFocus.length) {\n        hasFocus = this.uiDialog;\n      }\n      hasFocus.eq(0).trigger(\"focus\");\n    },\n    _restoreTabbableFocus: function () {\n      var activeElement = $.ui.safeActiveElement(this.document[0]),\n        isActive = this.uiDialog[0] === activeElement || $.contains(this.uiDialog[0], activeElement);\n      if (!isActive) {\n        this._focusTabbable();\n      }\n    },\n    _keepFocus: function (event) {\n      event.preventDefault();\n      this._restoreTabbableFocus();\n\n      // support: IE\n      // IE <= 8 doesn't prevent moving focus even with event.preventDefault()\n      // so we check again later\n      this._delay(this._restoreTabbableFocus);\n    },\n    _createWrapper: function () {\n      this.uiDialog = $(\"<div>\").hide().attr({\n        // Setting tabIndex makes the div focusable\n        tabIndex: -1,\n        role: \"dialog\"\n      }).appendTo(this._appendTo());\n      this._addClass(this.uiDialog, \"ui-dialog\", \"ui-widget ui-widget-content ui-front\");\n      this._on(this.uiDialog, {\n        keydown: function (event) {\n          if (this.options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode && event.keyCode === $.ui.keyCode.ESCAPE) {\n            event.preventDefault();\n            this.close(event);\n            return;\n          }\n\n          // Prevent tabbing out of dialogs\n          if (event.keyCode !== $.ui.keyCode.TAB || event.isDefaultPrevented()) {\n            return;\n          }\n          var tabbables = this.uiDialog.find(\":tabbable\"),\n            first = tabbables.first(),\n            last = tabbables.last();\n          if ((event.target === last[0] || event.target === this.uiDialog[0]) && !event.shiftKey) {\n            this._delay(function () {\n              first.trigger(\"focus\");\n            });\n            event.preventDefault();\n          } else if ((event.target === first[0] || event.target === this.uiDialog[0]) && event.shiftKey) {\n            this._delay(function () {\n              last.trigger(\"focus\");\n            });\n            event.preventDefault();\n          }\n        },\n        mousedown: function (event) {\n          if (this._moveToTop(event)) {\n            this._focusTabbable();\n          }\n        }\n      });\n\n      // We assume that any existing aria-describedby attribute means\n      // that the dialog content is marked up properly\n      // otherwise we brute force the content as the description\n      if (!this.element.find(\"[aria-describedby]\").length) {\n        this.uiDialog.attr({\n          \"aria-describedby\": this.element.uniqueId().attr(\"id\")\n        });\n      }\n    },\n    _createKoro: function () {\n      var koro;\n      var uniqueKoroId;\n      uniqueKoroId = Math.floor(Math.random() * 1000000);\n      koro = $('<svg xmlns=\"http://www.w3.org/2000/svg\" aria-hidden=\"true\" width=\"100%\" height=\"50\" fill=\"currentColor\"><defs><pattern id=\"korodialog-' + uniqueKoroId + '\" x=\"0\" y=\"0\" width=\"67\" height=\"51\" patternUnits=\"userSpaceOnUse\"><path d=\"M 67 70 V 30.32 h 0 C 50.25 30.32 50.25 20 33.5 20 S 16.76 30.32 0 30.32 H 0 V 70 Z\" /></pattern></defs><rect fill=\"url(#korodialog-' + uniqueKoroId + '\" width=\"100%\" height=\"50\" /></svg>');\n      this.uiKoro = $(\"<div>\");\n      this._addClass(this.uiKoro, \"hds-koros\");\n      koro.appendTo(this.uiKoro);\n      this.uiKoro.prependTo(this.uiDialog);\n    },\n    _createTitlebar: function () {\n      var uiDialogTitle;\n      this.uiDialogTitlebar = $(\"<div>\");\n      this._addClass(this.uiDialogTitlebar, \"ui-dialog-titlebar\", \"ui-widget-header ui-helper-clearfix\");\n      this._on(this.uiDialogTitlebar, {\n        mousedown: function (event) {\n          // Don't prevent click on close button (#8838)\n          // Focusing a dialog that is partially scrolled out of view\n          // causes the browser to scroll it into view, preventing the click event\n          if (!$(event.target).closest(\".ui-dialog-titlebar-close\")) {\n            // Dialog isn't getting focus when dragging (#8063)\n            this.uiDialog.trigger(\"focus\");\n          }\n        }\n      });\n\n      // Support: IE\n      // Use type=\"button\" to prevent enter keypresses in textboxes from closing the\n      // dialog in IE (#9312)\n      this.uiDialogTitlebarClose = $(\"<button type='button'></button>\").button({\n        label: $(\"<a>\").text(this.options.closeText).html(),\n        icon: \"ui-icon-closethick\",\n        showLabel: false\n      }).appendTo(this.uiDialogTitlebar);\n      this._addClass(this.uiDialogTitlebarClose, \"ui-dialog-titlebar-close\");\n      this._on(this.uiDialogTitlebarClose, {\n        click: function (event) {\n          event.preventDefault();\n          this.close(event);\n        }\n      });\n      var uiIcon;\n      uiDialogTitle = $(\"<h2>\").uniqueId().prependTo(this.uiDialogTitlebar);\n      this._addClass(uiDialogTitle, \"ui-dialog-title\");\n      this._title(uiDialogTitle);\n      this.uiDialogTitlebar.prependTo(this.uiDialog);\n      this.uiDialog.attr({\n        \"aria-labelledby\": uiDialogTitle.attr(\"id\")\n      });\n    },\n    _title: function (title) {\n      if (this.options.title) {\n        title.text(this.options.title);\n        $('<span class=\"hel-icon hel-icon--alert-circle \" aria-hidden=\"true\"></span>').prependTo(title);\n      } else {\n        title.html(\"&#160;\");\n      }\n    },\n    _createButtonPane: function () {\n      this.uiDialogButtonPane = $(\"<div>\");\n      this._addClass(this.uiDialogButtonPane, \"ui-dialog-buttonpane\", \"ui-widget-content ui-helper-clearfix\");\n      this.uiButtonSet = $(\"<div>\").appendTo(this.uiDialogButtonPane);\n      this._addClass(this.uiButtonSet, \"ui-dialog-buttonset\");\n      this._createButtons();\n    },\n    _createButtons: function () {\n      var that = this,\n        buttons = this.options.buttons;\n\n      // If we already have a button pane, remove it\n      this.uiDialogButtonPane.remove();\n      this.uiButtonSet.empty();\n      if ($.isEmptyObject(buttons) || Array.isArray(buttons) && !buttons.length) {\n        this._removeClass(this.uiDialog, \"ui-dialog-buttons\");\n        return;\n      }\n      $.each(buttons, function (name, props) {\n        var click, buttonOptions;\n        props = typeof props === \"function\" ? {\n          click: props,\n          text: name\n        } : props;\n\n        // Default to a non-submitting button\n        props = $.extend({\n          type: \"button\"\n        }, props);\n\n        // Change the context for the click callback to be the main element\n        click = props.click;\n        buttonOptions = {\n          icon: props.icon,\n          iconPosition: props.iconPosition,\n          showLabel: props.showLabel,\n          // Deprecated options\n          icons: props.icons,\n          text: props.text\n        };\n        delete props.click;\n        delete props.icon;\n        delete props.iconPosition;\n        delete props.showLabel;\n\n        // Deprecated options\n        delete props.icons;\n        if (typeof props.text === \"boolean\") {\n          delete props.text;\n        }\n        $(\"<button></button>\", props).button(buttonOptions).addClass(' hds-button hds-button--primary').appendTo(that.uiButtonSet).on(\"click\", function () {\n          click.apply(that.element[0], arguments);\n        });\n      });\n      this._addClass(this.uiDialog, \"ui-dialog-buttons\");\n      this.uiDialogButtonPane.appendTo(this.uiDialog);\n    },\n    _makeDraggable: function () {\n      var that = this,\n        options = this.options;\n      function filteredUi(ui) {\n        return {\n          position: ui.position,\n          offset: ui.offset\n        };\n      }\n      this.uiDialog.draggable({\n        cancel: \".ui-dialog-content, .ui-dialog-titlebar-close\",\n        handle: \".ui-dialog-titlebar\",\n        containment: \"document\",\n        start: function (event, ui) {\n          that._addClass($(this), \"ui-dialog-dragging\");\n          that._blockFrames();\n          that._trigger(\"dragStart\", event, filteredUi(ui));\n        },\n        drag: function (event, ui) {\n          that._trigger(\"drag\", event, filteredUi(ui));\n        },\n        stop: function (event, ui) {\n          var left = ui.offset.left - that.document.scrollLeft(),\n            top = ui.offset.top - that.document.scrollTop();\n          options.position = {\n            my: \"left top\",\n            at: \"left\" + (left >= 0 ? \"+\" : \"\") + left + \" \" + \"top\" + (top >= 0 ? \"+\" : \"\") + top,\n            of: that.window\n          };\n          that._removeClass($(this), \"ui-dialog-dragging\");\n          that._unblockFrames();\n          that._trigger(\"dragStop\", event, filteredUi(ui));\n        }\n      });\n    },\n    _makeResizable: function () {\n      var that = this,\n        options = this.options,\n        handles = options.resizable,\n        // .ui-resizable has position: relative defined in the stylesheet\n        // but dialogs have to use absolute or fixed positioning\n        position = this.uiDialog.css(\"position\"),\n        resizeHandles = typeof handles === \"string\" ? handles : \"n,e,s,w,se,sw,ne,nw\";\n      function filteredUi(ui) {\n        return {\n          originalPosition: ui.originalPosition,\n          originalSize: ui.originalSize,\n          position: ui.position,\n          size: ui.size\n        };\n      }\n      this.uiDialog.resizable({\n        cancel: \".ui-dialog-content\",\n        containment: \"document\",\n        alsoResize: this.element,\n        maxWidth: options.maxWidth,\n        maxHeight: options.maxHeight,\n        minWidth: options.minWidth,\n        minHeight: this._minHeight(),\n        handles: resizeHandles,\n        start: function (event, ui) {\n          that._addClass($(this), \"ui-dialog-resizing\");\n          that._blockFrames();\n          that._trigger(\"resizeStart\", event, filteredUi(ui));\n        },\n        resize: function (event, ui) {\n          that._trigger(\"resize\", event, filteredUi(ui));\n        },\n        stop: function (event, ui) {\n          var offset = that.uiDialog.offset(),\n            left = offset.left - that.document.scrollLeft(),\n            top = offset.top - that.document.scrollTop();\n          options.height = that.uiDialog.height();\n          options.width = that.uiDialog.width();\n          options.position = {\n            my: \"left top\",\n            at: \"left\" + (left >= 0 ? \"+\" : \"\") + left + \" \" + \"top\" + (top >= 0 ? \"+\" : \"\") + top,\n            of: that.window\n          };\n          that._removeClass($(this), \"ui-dialog-resizing\");\n          that._unblockFrames();\n          that._trigger(\"resizeStop\", event, filteredUi(ui));\n        }\n      }).css(\"position\", position);\n    },\n    _trackFocus: function () {\n      this._on(this.widget(), {\n        focusin: function (event) {\n          this._makeFocusTarget();\n          this._focusedElement = $(event.target);\n        }\n      });\n    },\n    _makeFocusTarget: function () {\n      this._untrackInstance();\n      this._trackingInstances().unshift(this);\n    },\n    _untrackInstance: function () {\n      var instances = this._trackingInstances(),\n        exists = $.inArray(this, instances);\n      if (exists !== -1) {\n        instances.splice(exists, 1);\n      }\n    },\n    _trackingInstances: function () {\n      var instances = this.document.data(\"ui-dialog-instances\");\n      if (!instances) {\n        instances = [];\n        this.document.data(\"ui-dialog-instances\", instances);\n      }\n      return instances;\n    },\n    _minHeight: function () {\n      var options = this.options;\n      return options.height === \"auto\" ? options.minHeight : Math.min(options.minHeight, options.height);\n    },\n    _position: function () {\n      // Need to show the dialog to get the actual offset in the position plugin\n      var isVisible = this.uiDialog.is(\":visible\");\n      if (!isVisible) {\n        this.uiDialog.show();\n      }\n      this.uiDialog.position(this.options.position);\n      if (!isVisible) {\n        this.uiDialog.hide();\n      }\n    },\n    _setOptions: function (options) {\n      var that = this,\n        resize = false,\n        resizableOptions = {};\n      $.each(options, function (key, value) {\n        that._setOption(key, value);\n        if (key in that.sizeRelatedOptions) {\n          resize = true;\n        }\n        if (key in that.resizableRelatedOptions) {\n          resizableOptions[key] = value;\n        }\n      });\n      if (resize) {\n        this._size();\n        this._position();\n      }\n      if (this.uiDialog.is(\":data(ui-resizable)\")) {\n        this.uiDialog.resizable(\"option\", resizableOptions);\n      }\n    },\n    _setOption: function (key, value) {\n      var isDraggable,\n        isResizable,\n        uiDialog = this.uiDialog;\n      if (key === \"disabled\") {\n        return;\n      }\n      this._super(key, value);\n      if (key === \"appendTo\") {\n        this.uiDialog.appendTo(this._appendTo());\n      }\n      if (key === \"buttons\") {\n        this._createButtons();\n      }\n      if (key === \"closeText\") {\n        this.uiDialogTitlebarClose.button({\n          // Ensure that we always pass a string\n          label: $(\"<a>\").text(\"\" + this.options.closeText).html()\n        });\n      }\n      if (key === \"draggable\") {\n        isDraggable = uiDialog.is(\":data(ui-draggable)\");\n        if (isDraggable && !value) {\n          uiDialog.draggable(\"destroy\");\n        }\n        if (!isDraggable && value) {\n          this._makeDraggable();\n        }\n      }\n      if (key === \"position\") {\n        this._position();\n      }\n      if (key === \"resizable\") {\n        // currently resizable, becoming non-resizable\n        isResizable = uiDialog.is(\":data(ui-resizable)\");\n        if (isResizable && !value) {\n          uiDialog.resizable(\"destroy\");\n        }\n\n        // Currently resizable, changing handles\n        if (isResizable && typeof value === \"string\") {\n          uiDialog.resizable(\"option\", \"handles\", value);\n        }\n\n        // Currently non-resizable, becoming resizable\n        if (!isResizable && value !== false) {\n          this._makeResizable();\n        }\n      }\n      if (key === \"title\") {\n        this._title(this.uiDialogTitlebar.find(\".ui-dialog-title\"));\n      }\n    },\n    _size: function () {\n      // If the user has resized the dialog, the .ui-dialog and .ui-dialog-content\n      // divs will both have width and height set, so we need to reset them\n      var nonContentHeight,\n        minContentHeight,\n        maxContentHeight,\n        options = this.options;\n\n      // Reset content sizing\n      this.element.show().css({\n        width: \"auto\",\n        minHeight: 0,\n        maxHeight: \"none\",\n        height: 0\n      });\n      if (options.minWidth > options.width) {\n        options.width = options.minWidth;\n      }\n\n      // Reset wrapper sizing\n      // determine the height of all the non-content elements\n      nonContentHeight = this.uiDialog.css({\n        height: \"auto\",\n        width: options.width\n      }).outerHeight();\n      minContentHeight = Math.max(0, options.minHeight - nonContentHeight);\n      maxContentHeight = typeof options.maxHeight === \"number\" ? Math.max(0, options.maxHeight - nonContentHeight) : \"none\";\n      if (options.height === \"auto\") {\n        this.element.css({\n          minHeight: minContentHeight,\n          maxHeight: maxContentHeight,\n          height: \"auto\"\n        });\n      } else {\n        this.element.height(Math.max(0, options.height - nonContentHeight));\n      }\n      if (this.uiDialog.is(\":data(ui-resizable)\")) {\n        this.uiDialog.resizable(\"option\", \"minHeight\", this._minHeight());\n      }\n    },\n    _blockFrames: function () {\n      this.iframeBlocks = this.document.find(\"iframe\").map(function () {\n        var iframe = $(this);\n        return $(\"<div>\").css({\n          position: \"absolute\",\n          width: iframe.outerWidth(),\n          height: iframe.outerHeight()\n        }).appendTo(iframe.parent()).offset(iframe.offset())[0];\n      });\n    },\n    _unblockFrames: function () {\n      if (this.iframeBlocks) {\n        this.iframeBlocks.remove();\n        delete this.iframeBlocks;\n      }\n    },\n    _allowInteraction: function (event) {\n      if ($(event.target).closest(\".ui-dialog\").length) {\n        return true;\n      }\n\n      // TODO: Remove hack when datepicker implements\n      // the .ui-front logic (#8989)\n      return !!$(event.target).closest(\".ui-datepicker\").length;\n    },\n    _createOverlay: function () {\n      if (!this.options.modal) {\n        return;\n      }\n      var jqMinor = $.fn.jquery.substring(0, 4);\n\n      // We use a delay in case the overlay is created from an\n      // event that we're going to be cancelling (#2804)\n      var isOpening = true;\n      this._delay(function () {\n        isOpening = false;\n      });\n      if (!this.document.data(\"ui-dialog-overlays\")) {\n        // Prevent use of anchors and inputs\n        // This doesn't use `_on()` because it is a shared event handler\n        // across all open modal dialogs.\n        this.document.on(\"focusin.ui-dialog\", function (event) {\n          if (isOpening) {\n            return;\n          }\n          var instance = this._trackingInstances()[0];\n          if (!instance._allowInteraction(event)) {\n            event.preventDefault();\n            instance._focusTabbable();\n\n            // Support: jQuery >=3.4 <3.6 only\n            // Focus re-triggering in jQuery 3.4/3.5 makes the original element\n            // have its focus event propagated last, breaking the re-targeting.\n            // Trigger focus in a delay in addition if needed to avoid the issue\n            // See https://github.com/jquery/jquery/issues/4382\n            if (jqMinor === \"3.4.\" || jqMinor === \"3.5.\") {\n              instance._delay(instance._restoreTabbableFocus);\n            }\n          }\n        }.bind(this));\n      }\n      this.overlay = $(\"<div>\").appendTo(this._appendTo());\n      this._addClass(this.overlay, null, \"ui-widget-overlay ui-front\");\n      this._on(this.overlay, {\n        mousedown: \"_keepFocus\"\n      });\n      this.document.data(\"ui-dialog-overlays\", (this.document.data(\"ui-dialog-overlays\") || 0) + 1);\n    },\n    _destroyOverlay: function () {\n      if (!this.options.modal) {\n        return;\n      }\n      if (this.overlay) {\n        var overlays = this.document.data(\"ui-dialog-overlays\") - 1;\n        if (!overlays) {\n          this.document.off(\"focusin.ui-dialog\");\n          this.document.removeData(\"ui-dialog-overlays\");\n        } else {\n          this.document.data(\"ui-dialog-overlays\", overlays);\n        }\n        this.overlay.remove();\n        this.overlay = null;\n      }\n    }\n  });\n\n  // DEPRECATED\n  // TODO: switch return back to widget declaration at top of file when this is removed\n  if ($.uiBackCompat !== false) {\n    // Backcompat for dialogClass option\n    $.widget(\"ui.dialog\", $.ui.dialog, {\n      options: {\n        dialogClass: \"\"\n      },\n      _createWrapper: function () {\n        this._super();\n        this.uiDialog.addClass(this.options.dialogClass);\n      },\n      _setOption: function (key, value) {\n        if (key === \"dialogClass\") {\n          this.uiDialog.removeClass(this.options.dialogClass).addClass(value);\n        }\n        this._superApply(arguments);\n      }\n    });\n  }\n  return $.ui.dialog;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/dialog.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/dialog.js"]();
/******/ 	
/******/ })()
;
//# sourceMappingURL=dialog.min.js.map