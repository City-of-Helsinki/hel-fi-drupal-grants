<?php

/**
 * @file
 * Functions to support theming in the HDBT Subtheme.
 */

declare(strict_types=1);

use Drupal\Component\Utility\Html;
use Drupal\Component\Utility\NestedArray;
use Drupal\Core\Entity\EntityForm;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Markup;
use Drupal\Core\Url;
use Drupal\grants_handler\ApplicationHandler;
use Drupal\taxonomy\Entity\Term;
use Drupal\webform\Entity\Webform;

/**
 * @file
 * Functions to support theming in the HDBT Subtheme.
 */

/**
 * Implements hook_theme().
 */
function hdbt_subtheme_theme($existing, $type, $theme, $path): array {
  return [
    'misc/helsinki_logo_icon' => [
      'variables' => [
        'language' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_status_messages().
 */
function hdbt_subtheme_preprocess_status_messages(&$variables): void {
  $request = \Drupal::request();
  $is_ajax = $request->isXmlHttpRequest();
  $variables['is_ajax'] = $is_ajax;
}

/**
 * Helper function to get the icons path.
 *
 * @return string|null
 *   Returns path for the icons SVG or null.
 */
function hdbt_subtheme_get_icons_path(): ?string {
  static $icon_path;
  if (!isset($icon_path)) {
    $theme_handler = \Drupal::service('theme_handler');
    $icon_path = '/' . $theme_handler->getTheme('hdbt_subtheme')->getPath() . '/dist/icons/sprite.svg';

    // Add icons path as a global variable.
    return $icon_path;
  }
  return $icon_path;
}

/**
 * Implements hook_preprocess().
 */
function hdbt_subtheme_preprocess(&$variables): void {
  $variables['hdbt_subtheme_icons_path'] = hdbt_subtheme_get_icons_path();
  $variables['#attached']['drupalSettings']['helfigrantapplicationsIconsPath'] = $variables['hdbt_subtheme_icons_path'];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_subtheme_preprocess_menu(&$variables): void {
  $variables['#cache']['contexts'] = ['url.path'];

  foreach ($variables['items'] as &$item) {
    if (isset($item['url'])) {
      /** @var \Drupal\Core\Url $url */
      $url = $item['url'];

      // Check if url is current page where we are now. Ignore query strings.
      $current_path = explode('?', Drupal::request()->getRequestUri())[0];
      $item['currentPath'] = $current_path;
      if ($url->toString() == $current_path) {
        $item['is_currentPage'] = TRUE;
      }
    }
  }
}

/**
 * Implements hook_aggregator_fetcher_info_alter().
 */
function hdbt_subtheme_preprocess_views_view(&$variables): void {
  $view = $variables['view'];

  // Operate only on ukk view.
  if ($view->id() === 'ukk') {
    // Get current exposed filter.
    $values = $view->getExposedInput();
    if (isset($values['ukk'])) {
      // Load term object.
      /** @var \Drupal\taxonomy\Entity\Term $currentTerm */
      $currentTerm = Term::load((int) $values['ukk']);
      // Set description.
      $variables['currentDescription'] = $currentTerm->getDescription();
      // Set current filter.
      $variables['currentFilter'] = $currentTerm->id();
    }
    // Set options for links.
    $variables['exposedOptions'] = $variables["exposed"]["ukk"]["#options"];
    unset($variables['exposedOptions']['All']);
  }

  if ($view->id() === 'application_search_search_api') {
    $applicationSearchLinkRaw = Url::fromRoute('view.application_search_search_api.search_page');
    $applicationSearchLink = $applicationSearchLinkRaw->toString();
    $variables['applicationSearchLink'] = $applicationSearchLink;

    $exposedValues = $view->getExposedInput();
    $variables['newExposedFilter'] = [];

    foreach ($exposedValues as $exposedValueID => $exposedValue) {
      // Map specific values for the 'applicant' filter.
      // It is a filter, not a taxonomy term, that's why it's different.
      if ($exposedValueID === 'applicant' && $exposedValue !== 'All') {
        $tOpts = ['context' => 'grants_application_search'];
        $applicantTranslations = [
          'private_person' => t('Private person', [], $tOpts),
          'unregistered_community' => t('Unregistered community or group', [], $tOpts),
          'registered_community' => t('Registered community', [], $tOpts),
        ];
        $variables['newExposedFilter'][$exposedValueID] = $applicantTranslations[$exposedValue];
        continue;
      }

      // Map the exposed value ID to the term name.
      $exposedValueTerm = $exposedValueID;
      if ($exposedValueID === 'activity') {
        $exposedValueTerm = 'avustuslaji';
      }

      $query = \Drupal::entityQuery('taxonomy_term');
      $query->condition('vid', $exposedValueTerm);
      $query->accessCheck(FALSE);
      $tids = $query->execute();
      $terms = Term::loadMultiple($tids);
      $language = \Drupal::languageManager()->getCurrentLanguage()->getId();

      $termList = [];

      foreach ($terms as $term) {
        if ($term->hasTranslation($language)) {
          $translated_term = \Drupal::service('entity.repository')->getTranslationFromContext($term, $language);
          $tid = $term->id();
          $termList[$tid] = $translated_term->label();
        }
      }

      // Map the exposed value to the corresponding term name.
      foreach ($termList as $term_id => $term_name) {
        $term_id = strval($term_id);
        if (isset($exposedValues[$exposedValueID]) && $term_id === $exposedValues[$exposedValueID]) {
          $variables['newExposedFilter'][$exposedValueID] = $term_name;
        }
      }
    }
  }
}

/**
 * Preprocess details.
 */
function hdbt_subtheme_preprocess_details(&$variables): void {
  $uuid_service = \Drupal::service('uuid');
  $uuid = $uuid_service->generate();

  /** @var \Drupal\grants_profile\GrantsProfileService $grantsProfile */
  $grantsProfile = Drupal::service('grants_profile.service');
  $type = $grantsProfile->getApplicantType();

  // Hide community officials if user is private person.
  if ($type === 'private_person' && is_array($variables['children'])) {
    unset($variables["children"]["toiminnasta_vastaavat_henkilot"]);
  }

  $variables['accordionid'] = $uuid;
}

/**
 * Preprocess views view fields.
 */
function hdbt_subtheme_preprocess_views_view_fields(&$variables): void {
  $view = $variables['view'];

  if ($view->id() === 'application_search_search_api') {
    $dateIcon = '<span aria-hidden="true" class="hel-icon hel-icon--calendar-clock hel-icon--size-s"></span>';

    $continuous = $variables['fields']['field_application_continuous']->content->__toString();

    // To get this working on development mode.
    $continuous = preg_replace('/<!--(.|\s)*?-->/', '', $continuous);
    $continuous = str_replace(["\n", "\r"], '', $continuous);

    $applicationPeriod = $variables['fields']['field_application_period']->content;

    if (is_object($applicationPeriod)) {
      $applicationPeriod = $applicationPeriod->__toString();
    }

    // To get this working on development mode.
    $applicationPeriod = preg_replace('/<!--(.|\s)*?-->/', '', $applicationPeriod);
    $applicationPeriod = str_replace(["\n", "\r"], '', $applicationPeriod);

    if ($continuous == "1") {
      $variables['fields']['field_application_period']->content = Markup::create($dateIcon . '<span>' . t('Continuous application') . '</span>');
    }
    elseif (!empty($applicationPeriod)) {
      $variables['fields']['field_application_period']->content = Markup::create($dateIcon . '<span>' . t('Application period') . ' ' . $variables['fields']['field_application_period']->content . '</span>');
    }
    else {
      $variables['fields']['field_application_period']->content = Markup::create($dateIcon . '<span>' . t('The application period will be announced later') . '</span>');
    }
    unset($variables['fields']['field_application_continuous']);
  }
}

/**
 * Implements hook_field_widget_paragraphs_form_alter().
 */
function hdbt_subtheme_field_widget_paragraphs_form_alter(&$element, FormStateInterface &$form_state, $context): void {
  switch ($element['#paragraph_type']) {
    case 'myparagraphs':
      if ($form_state->getFormObject() instanceof EntityForm) {
        $term = $form_state->getFormObject()->getEntity();
        // Check if paragraph is inside a form term.
        if ($term && ($term->getEntityTypeId() == 'taxonomy_term')) {
          $voc = $term->bundle();
          // Check if it is the desired voc.
          if ($voc == 'my_voc') {
            // To hide only one field.
            // unset($element['subform']['field_to_be hidded']);
            // To hide all the form.
            $element = [];
          }
        }
      }
      break;

    default:
      break;
  }
}

/**
 * Adds webform details to the printing page.
 */
function hdbt_subtheme_preprocess_grants_handler_print_atv_document(&$vars): void {
  $language = $vars['document_langcode'];
  $vars["title"] = $vars['atv_document']['human_readable_type'][$language];
  $vars['helsinki_logo'] = [
    '#theme' => 'misc/helsinki_logo_icon',
    '#language' => $language,
  ];
  ksort($vars['pages']);
  $vars['date'] = date_format(date_create($vars['atv_document']['updated_at']), 'd.m.Y H:i');

  $submissionObject = ApplicationHandler::submissionObjectFromApplicationNumber($vars['atv_document']['transaction_id']);

  $vars['statusTag'] = [
    '#theme' => 'application_status_tag',
    '#applicationID' => $vars['atv_document']['transaction_id'],
    '#langcode' => $language,
    '#submission' => $submissionObject,
  ];

}

/**
 * Adds webform details to the preview page for printing.
 */
function grants_webform_print_preprocess_webform_submission_data(&$vars): void {
  $wf = $vars['webform_submission']->getWebform();
  $vars["title"] = $wf->label();
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $vars['helsinki_logo'] = [
    '#theme' => 'misc/helsinki_logo_icon',
    '#language' => $language,
  ];
}

/**
 * Prepares variables for webform section element templates.
 *
 * Default template: webform-section.html.twig.
 *
 * Copied from: template_preprocess_fieldset()
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 *     Properties used: #attributes, #children, #description, #id, #title,
 *     #value.
 */
function hdbt_subtheme_preprocess_webform_section(array &$variables): void {
  if ($variables['title_tag'] == 'h2') {
    $variables['title_tag'] = 'h3';
  }
}

/**
 * Prepares webform element description, help, and more templates.
 *
 * @see template_preprocess_form_element()
 * @see core/modules/system/templates/form-element.html.twig
 * @see template_preprocess_details()
 * @see /core/modules/system/templates/details.html.twig
 * @see template_preprocess_fieldset()
 * @see /core/modules/system/templates/fieldset.html.twig
 * @see template_preprocess_webform_section()
 * @see /webform/templates/webform-section.html.twig
 */
function hdbt_subtheme_preprocess_form_element(array &$variables, $title_parents = ['label']): void {

  $element = &$variables['element'];
  $type = $element['#type'] ?? '';

  // This stuff is done already with webform forms.
  // So we're skipping it for them.
  if (array_key_exists('#webform', $element)) {
    return;
  }

  // Fix details 'description' property which does not have description.content.
  // @see template_preprocess_details
  // @see Issue #2896169: Details elements have incorrect aria-describedby attributes
  if (!empty($element['#description'])) {
    // Normalize description into a simple render array.
    if (is_array($element['#description'])) {
      $description = [$element['#description']];
    }
    else {
      $description = ['#markup' => $element['#description']];
    }

    if ($type === 'details') {
      $description_attributes = [];
      if (!empty($element['#id'])) {
        $description_attributes['id'] = $element['#id'] . '--description';
      }
      $variables['description'] = [];
      $variables['description']['content'] = [
        '#type' => 'container',
        '#attributes' => new Attribute($description_attributes),
      ] + $description;
    }
    else {
      $variables['description'] += ['attributes' => new Attribute()];
      // Wrap description in a container.
      $variables['description']['content'] = [
        '#type' => 'container',
        '#attributes' => $variables['description']['attributes'],
      ] + $description;
      $variables['description']['attributes'] = new Attribute();
    }

    $variables['description']['content']['#attributes']->addClass('webform-element-description');

    // Handle invisible descriptions.
    if (isset($element['#description_display']) && $element['#description_display'] === 'invisible') {
      $variables['description']['content']['#attributes']->addClass('visually-hidden');
      $variables['description_display'] = 'after';
    }

    // Nest description content so that we can a more link
    // below the description.
    $variables['description']['content'] = [
      'description' => $variables['description']['content'],
    ];
  }
  elseif (isset($variables['description']) && empty($variables['description'])) {
    // Unset $variable['description'] which can be set to NULL or empty string.
    // This allows $variable['description'] to be converted to render array.
    // @see template_preprocess_details()
    // @see template_preprocess_form_element()
    unset($variables['description']);
  }

  if (is_string($title_parents)) {
    $title_parents = [$title_parents];
  }

  // Add help to title (aka label).
  _hdbt_subtheme_preprocess_help($variables, $title_parents);

  // Hide 'item' label[for].
  if ($type === 'item') {
    $variables['label']['#attributes']['webform-remove-for-attribute'] = TRUE;
  }
}

/**
 * Append #help to title or element variable.
 */
function _hdbt_subtheme_preprocess_help(array &$variables, $title_parents = ['label']): void {

  $element = &$variables['element'];
  $type = $element['#type'] ?? '';

  if (empty($element['#help'])) {
    return;
  }

  $help_display = $element['#help_display'] ?? 'title_after';

  // Determine target variable (aka render element).
  $targets = [
    'title_before' => 'title',
    'title_after' => 'title',
    // Details don't support prefix and suffix.
    // @see details.html.twig
    'element_before' => ($type === 'details') ? 'children' : 'prefix',
    'element_after' => ($type === 'details') ? 'children' : 'suffix',
  ];
  $target = $targets[$help_display];

  // Determine the target element.
  if ($target === 'title') {
    // User title parent to the title (target) element.
    $target_element =& NestedArray::getValue($variables, ['label']);

    // Empty title should not display help.
    if (empty($target_element)) {
      return;
    }
  }
  else {
    $variables += [$target => []];
    $target_element = &$variables[$target];
  }
  // Default #help_title to element's #title.
  if (empty($element['#help_title']) && !empty($element['#title'])) {
    $element['#help_title'] = $element['#title'];
  }

  $build = [];
  if (!empty($target_element)) {
    $build[$target] = (is_array($target_element)) ? $target_element : ['#markup' => $target_element];
  }
  $build['help'] = [
    '#type' => 'webform_help',
  ] + array_intersect_key($element, array_flip(['#help', '#help_title']));

  // Add help attributes.
  if (isset($element['#help_attributes'])) {
    $build['help']['#attributes'] = $element['#help_attributes'];
  }

  // Get #title_display and move help before title for 'inline' titles.
  if (isset($element['#_title_display'])) {
    // #_title_display is set via WebformElementBase::prepare.
    // @see \Drupal\webform\Plugin\WebformElementBase::prepare.
    $title_display = $element['#_title_display'];
  }
  elseif (isset($element['#title_display'])) {
    $title_display = $element['#title_display'];
  }
  else {
    $title_display = NULL;
  }

  // Place help before the target.
  if (isset($build[$target])) {
    if (($target === 'title' && $title_display === 'inline')
      || $help_display === 'title_before'
      || $help_display === 'element_before') {
      $build[$target]['#weight'] = 0;
      $build['help']['#weight'] = -1;
    }
  }

  // Add help container classes to element wrapper.
  $variables['attributes']['class'][] = Html::getClass('webform-element-help-container--' . preg_replace('/(_after|_before)/', '', $help_display));
  $variables['attributes']['class'][] = Html::getClass('webform-element-help-container--' . $help_display);

  // Replace $variables with new render array containing help.
  $target_element = $build;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_subtheme_preprocess_block(&$variables): void {
  if (isset($variables['elements']['#id'])) {
    $variables['content']['#attributes']['block_id'] = $variables['elements']['#id'];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function hdbt_subtheme_theme_suggestions_block_alter(&$suggestions): void {
  // Load theme suggestions for blocks from parent theme.
  foreach ($suggestions as &$suggestion) {
    $suggestion = str_replace('hdbt_subtheme_', '', $suggestion);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function hdbt_subtheme_theme_suggestions_menu_alter(&$suggestions, $variables): void {
  if (isset($variables['attributes']['block_id'])) {
    $block_id = str_replace('hdbt_subtheme_', '', $variables['attributes']['block_id']);

    $suggestions[] = match ($block_id) {
      'mobile_navigation' => 'menu__mobile',
      'mainnavigation' => 'menu__main__desktop',
      'main_navigation_level_2' => 'menu__main__sidebar',
      default => 'menu__' . $variables['attributes']['block_id'],
    };
  }
}

/**
 * Implements hook_preprocess_html().
 */
function hdbt_subtheme_preprocess_html(&$variables): void {
  $route = \Drupal::routeMatch()->getRouteObject();

  if ($route) {
    $view_id = $route->getDefault('view_id');
    $display_id = $route->getDefault('display_id');

    if ($view_id) {
      $variables['attributes']['class'][] = 'view_' . $view_id;
      $variables['attributes']['class'][] = 'view-display_' . $display_id;
    }
  }

  $current_route = \Drupal::routeMatch();
  $route_name = $current_route->getRouteName();

  if ($route_name == 'grants_oma_asiointi.front' || $route_name == 'grants_profile.show') {
    $variables['attributes']['class'][] = 'page--oma-asiointi';
  }

  /** @var \Drupal\grants_profile\GrantsProfileService $grantsProfileService */
  $grantsProfileService = \Drupal::service('grants_profile.service');
  $selectedRoleData = $grantsProfileService->getSelectedRoleData();

  if (isset($selectedRoleData)) {
    $variables['attributes']['class'][] = "page--oma-asiointi__{$selectedRoleData['type']}";
    $variables['attributes']['class'][] = "grants-role-{$selectedRoleData['type']}";
  }

}

/**
 * Implements hook_form_alter().
 */
function hdbt_subtheme_form_alter(&$form, FormStateInterface $form_state, $form_id): void {
  if ($form_id == 'openid_connect_login_form') {
    $form['openid_connect_client_tunnistamo_login']['#value'] = t('Log in');
  }

  // Attach the restricted-datepicker library to the various forms.
  if (isset($form['#webform_id'])) {
    $webform = Webform::load($form['#webform_id']);

    if ($webform) {
      $allowed_application_types = [
        'LIIKUNTATAPAHTUMA',
        'NUORPROJ',
        'KUVAPROJ',
        'KUVAKEHA',
        'KASKOIPLISA',
      ];
      $applicationType = $webform->getThirdPartySetting('grants_metadata', 'applicationType');

      if (in_array($applicationType, $allowed_application_types)) {
        $form['#attached']['library'][] = 'hdbt_subtheme/restricted-datepicker';
        $form['#attached']['drupalSettings']['restricted_datepicker']['application_type'] = $applicationType;
      }
    }
  }
}

/**
 * Implements hook_preprocess_block__user_login_block().
 */
function hdbt_subtheme_preprocess_block__user_login_block(&$variables, $hook): void {
  $variables['content']['user_links'] = NULL;
}

/**
 * Implements hook_preprocess_block__user_login_block().
 */
function hdbt_subtheme_preprocess_block__askemblock(&$variables, $hook): void {
  $variables['current_language'] = \Drupal::languageManager()->getCurrentLanguage()->getId();
}

/**
 * Implements template_preprocess_paragraph().
 */
function hdbt_subtheme_preprocess_paragraph(&$variables): void {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  $parentBundle = $paragraph->bundle();
  if ($parentBundle == 'oma_asiointi') {
    /** @var \Drupal\grants_profile\GrantsProfileService $grantsProfileService */
    $grantsProfileService = \Drupal::service('grants_profile.service');
    $selectedCompany = $grantsProfileService->getSelectedRoleData();
    $variables['company'] = $selectedCompany;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_subtheme_preprocess_tpr_service_channel(array &$variables): void {
  $node = \Drupal::routeMatch()->getParameter('node');
  $typeName = $node ? $node->bundle() : NULL;

  if ($typeName !== 'service') {
    return;
  }

  $variables['#cache']['max-age'] = 0;
  $webform = $node->get('field_webform')->target_id;

  if (!isset($variables['content']['links'])) {
    return;
  }

  $items = $variables['content']['links']['#items'] ?? NULL;

  if (!$items) {
    return;
  }

  $current_url = Url::fromRoute('<current>');
  $path = $current_url->toString();

  // Remove link if the path is similar to TPR link or if the webform matches.
  foreach ($variables['content']['links']['#items']->getIterator() as $key => $item) {
    $values = $item->getValue();
    $item->setValue($values);
    if (
      ($webform && strpos($values['uri'], $webform) !== FALSE) ||
      strpos($values['uri'], $path) !== FALSE
    ) {
      $items->removeItem($key);
    }
  }

  // New application button for logged in user.
  $servicePageAuthBlock = \Drupal::service('plugin.manager.block')
    ->createInstance('grants_handler_service_page_auth_block', []);
  $blockLink = $servicePageAuthBlock->buildAsTprLink();
  if ($blockLink) {
    $items->appendItem($blockLink);
  }

  // Login link for unauthenticated users.
  if (!\Drupal::currentUser()->isAuthenticated()) {
    static $rendered = FALSE;

    if ($rendered) {
      return;
    }

    $link = Url::fromRoute('user.login', [], ['absolute' => TRUE]);
    $items->appendItem([
      'title' => t('Log into the service', [], ['context' => 'grants_front_banner']),
      'uri' => $link->toString(),
      'options' => [],
      '_attributes' => [],
    ]);

    $rendered = TRUE;
  }
}
