<?php

/**
 * @file
 * Primary module hooks for Helsinki-profiili module.
 *
 * @DCG
 * This file is no longer required in Drupal 8.
 * @see https://www.drupal.org/node/2217931
 */

use Drupal\Core\Session\AccountProxyInterface;
use Drupal\Core\TempStore\TempStoreException;
use Drupal\helfi_helsinki_profiili\ProfileDataException;
use Drupal\helfi_helsinki_profiili\TokenExpiredException;
use Drupal\user\UserInterface;
use GuzzleHttp\Exception\GuzzleException;

/**
 * OpenID Connect post authorize hook.
 *
 * This hook runs after a user has been authorized and claims have been mapped
 * to the user's account.
 *
 * A popular use case for this hook is saving token and additional identity
 * provider related information to the user's Drupal session (private temp
 * store).
 *
 * @param \Drupal\user\UserInterface $account
 *   User account object of the authorized user.
 * @param array $context
 *   An associative array with context information:
 *   - tokens:         An array of tokens.
 *   - user_data:      An array of user and session data.*
 *   - plugin_id:      The plugin identifier.
 *   - sub:            The remote user identifier.
 *
 * @ingroup openid_connect_api
 */
function helfi_helsinki_profiili_openid_connect_post_authorize(UserInterface $account, array $context): void {
  $session = \Drupal::request()->getSession();
  $session->set('openid_connect_plugin_id', $context["plugin_id"]);
  if (isset($context['tokens']['refresh_token'])) {
    $session->set('openid_connect_refresh_token', $context['tokens']['refresh_token']);
    $session->set('openid_connect_expire', $context['tokens']['expire']);
  }

  if (empty($context["user_data"]["ad_groups"])) {
    try {
      /** @var Drupal\helfi_helsinki_profiili\HelsinkiProfiiliUserData $profileDAO */
      $profileDAO = \Drupal::service('helfi_helsinki_profiili.userdata');
      // Set user data from openid.
      $profileDAO->setUserData($context['user_data']);
      // Fetch HelsinkiProfile data.
      try {
        $data = $profileDAO->getUserProfileData();

        if ($data == NULL) {
          \Drupal::messenger()
            ->addWarning(t('User logged in to Helsinki services, no profile data found.'));
        }
        else {
          \Drupal::messenger()->addStatus(t('User logged in to Helsinki services and data fetched.'));
        }

      }
      catch (ProfileDataException $e) {
        \Drupal::messenger()->addError(t('User logged in to Helsinki services and data fetch failed'));
        \Drupal::logger('helfi_helsinki_profiili')
          ->error('User profile data fetch failed. Error: @error',
            [
              '@error' => $e->getMessage(),
            ]
                );
      }
      catch (TokenExpiredException $e) {
        \Drupal::messenger()->addError(t('User logged in but fetching tokens failed'));
        \Drupal::logger('helfi_helsinki_profiili')
          ->error('API token fetch failed. Error: @error',
            [
              '@error' => $e->getMessage(),
            ]
          );
      }
    }
    catch (GuzzleException $e) {
      \Drupal::messenger()->addError(t('User logged in to Helsinki services and data fetch failed'));
    }
    catch (TempStoreException $e) {
    }
  }

}

/**
 * Implements hook_user_logout().
 */
function helfi_helsinki_profiili_user_logout(AccountProxyInterface $account) {
  /** @var Drupal\helfi_helsinki_profiili\HelsinkiProfiiliUserData */
  $helsinkiProfiili = \Drupal::service('helfi_helsinki_profiili.userdata');
  $helsinkiProfiili->clearCache();
}
