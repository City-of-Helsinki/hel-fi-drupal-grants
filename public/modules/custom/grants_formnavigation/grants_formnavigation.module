<?php

/**
 * @file
 * Contains grants_formnavigation.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\webform\WebformInterface;
use Drupal\webform\WebformSubmissionStorageInterface;

/**
 * Implements hook_help().
 */
function grants_formnavigation_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the grants_formnavigation module.
    case 'help.page.grants_formnavigation':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Allows users to navigate forwards and backwards through multi-page webforms using the wizard progress bar.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_theme().
 */
function grants_formnavigation_theme() {
  return [
    // Override the webform progress bar so we can add our page classes.
    'webform_progress_bar' => [
      'variables' => [
        'webform' => NULL,
        'webform_submission' => NULL,
        'current_page' => NULL,
        'operation' => NULL,
        'max_pages' => 10,
        'page_classes' => [],
      ],
    ],
    // Override the webform progress tracker so we can add our page classes.
    'webform_progress_tracker' => [
      'variables' => [
        'webform' => NULL,
        'webform_submission' => NULL,
        'current_page' => NULL,
        'operation' => NULL,
        'max_pages' => 10,
        'page_classes' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function grants_formnavigation_preprocess_webform_progress_tracker(&$variables) {
  /** @var \Drupal\webform\WebformInterface $webform */
  $webform = $variables['webform'];
  /** @var \Drupal\webform\WebformSubmissionInterface $webform_submission */
  $webform_submission = $variables['webform_submission'];

  $pages = $webform->getPages($variables['operation'], $webform_submission);
  // Get the logged errors for the form.
  /** @var \Drupal\grants_formnavigation\GrantsFormNavigationHelper $grants_formnavigation_helper */
  $grants_formnavigation_helper = Drupal::service('grants_formnavigation.helper');
  $current_errors = $grants_formnavigation_helper->getErrors($webform_submission);
  // Iterate through the pages and set appropriate page classes.
  foreach ($pages as $key => $page) {
    // Add the default class for the page.
    $variables['page_classes'][$key][] = 'progress-step';
    // Add the visited and error classes if it has been logged.
    if (isset($current_errors[$key])) {
      // Add an error class if the page has errors or complete class if not.
      $variables['page_classes'][$key][] = empty($current_errors[$key]) ? 'is-complete' : 'has-errors';
    }
    // Add an active class to the current page.
    if ($variables['current_page'] == $key) {
      $variables['page_classes'][$key][] = 'is-active';
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function grants_formnavigation_preprocess_webform_progress_bar(&$variables) {
  /** @var \Drupal\webform\WebformInterface $webform */
  $webform = $variables['webform'];
  /** @var \Drupal\webform\WebformSubmissionInterface $webform_submission */
  $webform_submission = $variables['webform_submission'];

  $pages = $webform->getPages($variables['operation'], $webform_submission);
  // Get the logged errors for the form.
  /** @var \Drupal\grants_formnavigation\GrantsFormNavigationHelper $grants_formnavigation_helper */
  $grants_formnavigation_helper = Drupal::service('grants_formnavigation.helper');
  $current_errors = $grants_formnavigation_helper->getErrors($webform_submission);
  // Iterate through the pages and set appropriate page classes.
  foreach ($pages as $key => $page) {
    // Add the default class for the page.
    $variables['page_classes'][$key][] = 'webform-progress-bar__page';
    // Add the visited and error classes if it has been logged.
    if (isset($current_errors[$key])) {
      // Add an error class if the page has errors or complete class if not.
      $variables['page_classes'][$key][] = empty($current_errors[$key]) ? 'webform-progress-bar__page--done' : 'webform-progress-bar__page--errors';
    }
    // Add an active class to the current page.
    if ($variables['current_page'] == $key) {
      $variables['page_classes'][$key][] = 'webform-progress-bar__page--current';
    }
  }
}

/**
 * Implements hook_webform_submission_form_alter().
 */
function grants_formnavigation_webform_submission_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $form['actions']['wizard_next']['#validate'][] = '::noValidate';
}

/**
 * Programmatically validate a webform submission.
 *
 * @param array $form
 *   An associative array containing the structure of the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 *
 * @throws \Exception
 */
function grants_formnavigation_submission_validation(array &$form, FormStateInterface $form_state) {
  // /** @var \Drupal\grants_formnavigation\grants_formnavigationHelper $grants_formnavigation_helper */
  //  $grants_formnavigation_helper = Drupal::service('grants_formnavigation.helper');
  //  /** @var \Drupal\webform\WebformSubmissionInterface $webform_submission */
  //  $webform_submission = $form_state->getFormObject()->getEntity();
  //  $webform = $webform_submission->getWebform();
  //  $has_errors = FALSE;
  //  // Ensure each page has been validated.
  //  $grants_formnavigation_helper->validateAllPages($webform_submission, $form_state);
  //  // Log the form errors.
  //  $grants_formnavigation_helper->logPageErrors($webform_submission, $form_state);
  //  // Clear errors and place the submission errors above them.
  //  $form_state->clearErrors();
  //  // Validate our submission values.
  //  $logged_errors = $grants_formnavigation_helper->getErrors($webform_submission);
  // // Set form errors if the values are in-valid.
  //  foreach ($webform_submission->getWebform()
  //             ->getPages('edit', $webform_submission) as $page_key => $page) {
  //    $page_errors = !empty($logged_errors[$page_key]) ? $logged_errors[$page_key] : [];
  //    if (!empty($page_errors)) {
  //      $has_errors = TRUE;
  //      // Set an error on the page to create separation in the error message.
  //      $page_message = t('<p class="grants_formnavigation-page-title"><strong>@title Page</strong></p>', ['@title' => $page['#title']]);
  //      $form_state->setErrorByName($page_key, $page_message);
  //      // Parse through the errors and set a form error for each.
  //      foreach ($page_errors as $field => $error) {
  //        $message = t('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;â€¢ @message', ['@message' => $error]);
  //        $form_state->setErrorByName($field, $message);
  //      }
  //    }
  //  }
  //  // Add additional error message if defined in the settings.
  //  if ($has_errors && !empty($webform->getThirdPartySetting('grants_formnavigation', 'additional_error_message'))) {
  //    $keys = array_keys($webform->getElementsInitializedAndFlattened());
  //    $additional_error_message = $webform->getThirdPartySetting('grants_formnavigation', 'additional_error_message');
  //    $message = t('<br><p class="grants_formnavigation-additional-message">@message</p>', ['@message' => $additional_error_message]);
  //    $form_state->setErrorByName($keys[1], $message);
  //  }
}

/**
 * Implements hook_entity_update().
 */
function grants_formnavigation_webform_presave(WebformInterface $webform) {
  // Set an appropriate default purge setting.
  if ($purge_setting = $webform->getSetting('purge')) {
    switch ($purge_setting) {
      // We need to make sure drafts are purged as well.
      case WebformSubmissionStorageInterface::PURGE_COMPLETED:
        $purge = WebformSubmissionStorageInterface::PURGE_ALL;
        break;

      default:
        $purge = WebformSubmissionStorageInterface::PURGE_DRAFT;
        break;
    }
  }
  else {
    $purge = WebformSubmissionStorageInterface::PURGE_DRAFT;
  }
  // Enable the draft save if not already set.
  $draft_setting = $webform->getSetting('draft');
  if ($draft_setting !== WebformInterface::DRAFT_ALL) {
    $webform->setSetting('draft', WebformInterface::DRAFT_ALL);
  }
  // Set purge status to prevent clutter in the db.
  if ($purge_setting !== WebformSubmissionStorageInterface::PURGE_ALL
    || $purge_setting !== WebformSubmissionStorageInterface::PURGE_DRAFT) {
    $webform->setSetting('purge', $purge);
  }
  // Add a purge time frame if not set.
  if (empty($webform->getSetting('purge_days'))) {
    $webform->setSetting('purge_days', 365);
  }
  // Enable the linking to wizard pages.
  if (empty($webform->getSetting('wizard_progress_link'))) {
    $webform->setSetting('wizard_progress_link', TRUE);
  }
}
