<?php

/**
 * @file
 * Module file for industry things.
 */

declare(strict_types=1);

/**
 * @file
 * Primary module hooks for grants_industries module.
 *
 * @DCG
 * This file is no longer required in Drupal 8.
 * @see https://www.drupal.org/node/2217931
 */

use Drupal\Component\Serialization\Json;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\node\NodeInterface;
use Drupal\user\Entity\User;
use Drupal\user\UserInterface;

/**
 * Implements hook_entity_operation_alter().
 */
function grants_industries_entity_operation_alter(array &$operations, EntityInterface $entity): void {
  $user = Drupal::currentUser();
  $userEntity = User::load($user->id());
  $webformAccessService = \Drupal::service('grants_industries.webform_access_check_service');
  $entityBundle = $entity->bundle();

  // Adjust webform operations.
  if ($entityBundle === 'webform') {
    // Remove operation links for non admin users.
    if (!$webformAccessService->hasAdminRole($userEntity)) {
      unset($operations['edit']);
      unset($operations['test']);
      unset($operations['results']);
      unset($operations['duplicate']);
      unset($operations['delete']);

      // But allow access to the settings operation if the user
      // is a webform admin or the industries match.
      if (!$webformAccessService->hasWebformAdminRole($userEntity) &&
          !$webformAccessService->hasWebformIndustryAccess($userEntity, $entity)) {
        unset($operations['settings']);
      }
    }
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function grants_industries_entity_type_alter(array &$entity_types): void {
  // Override the translation handler so that we can prevent users
  // from deleting a translation if they are not allowed
  // to delete the original node or term.
  $entity_types['node']->setHandlerClass('translation', 'Drupal\grants_industries\CustomNodeTranslationHandler');
  $entity_types['taxonomy_term']->setHandlerClass('translation', 'Drupal\grants_industries\CustomTermTranslationHandler');
}

/**
 * Implements hook_form_alter().
 */
function grants_industries_form_alter(&$form, FormStateInterface $form_state, $form_id): void {
  $user = Drupal::currentUser();
  $userEntity = User::load($user->id());
  $webformAccessService = \Drupal::service('grants_industries.webform_access_check_service');
  $roles = $user->getRoles();

  // Disallow access to various webform settings for non admin users.
  if ($form_id === 'webform_settings_form' && !$webformAccessService->hasAdminRole($userEntity)) {
    $form['general_settings']['#access'] = FALSE;
    $form['page_settings']['#access'] = FALSE;
    $form['ajax_settings']['#access'] = FALSE;
    $form['author_information']['#access'] = FALSE;
    $form['share_settings']['#access'] = FALSE;
    $form['advanced_settings']['#access'] = FALSE;
  }

  if (!in_array('helsinkiprofiili', $roles)) {
    return;
  }

  if ($form_id == 'user_form') {
    if (!in_array(['admin', 'grants_admin'], $roles)) {
      $form["field_industry"]["#disabled"] = TRUE;
    }
  }

}

/**
 * Implements hook_node_access_records().
 */
function grants_industries_node_access_records(NodeInterface $node) {
  $grants_industries_gid = _grants_industries_get_gid();

  // Let's add custom grant for selected industry in service page nodes.
  if ($node->getType() === 'service') {
    // Get selected field value.
    $industry = $node->get('field_industry')->value;
    // Create realm string.
    $industry_realm = 'grants_industry_' . $industry;
    // Create grants for this industry on this node.
    // This means that in hook_node_grants below we can then add proper grant
    // for user when checking their permissions.
    $grants[] = [
      'realm' => $industry_realm,
      'gid' => $grants_industries_gid,
      'grant_view' => 1,
      'grant_update' => 1,
      'grant_delete' => 0,
    ];
    return $grants;
  }
}

/**
 * Returns the grants_industries_gid.
 *
 * @return int
 *   The GID.
 */
function _grants_industries_get_gid() {
  return 123;
}

/**
 * Implements hook_node_grants().
 */
function grants_industries_node_grants(AccountInterface $account, $op) {
  $grants_industries_gid = _grants_industries_get_gid();

  $grants = [];
  // Work on updates, otherwise leave as is set up in general permissions.
  if ($op == 'update') {
    // Get user roles.
    $userRoles = $account->getRoles();
    // Check that user has industry producer role.
    if (in_array('content_producer_industry', $userRoles)) {
      // Load user object.
      $userObject = User::load($account->id());
      // Get user's industry selection.
      foreach ($userObject->field_industry as $userIndustryField) {
        $userIndustry = $userIndustryField->value;
        if ($userIndustry) {
          // If we have set industry for user.
          $industry_realm = 'grants_industry_' . $userIndustry;
          // Add this realm for this user.
          $grants[$industry_realm] = $grants_industries_gid;
        }
      }
    }
  }
  return $grants;
}

/**
 * Implements hook_openid_connect_post_authorize().
 */
function grants_industries_openid_connect_post_authorize(UserInterface $account, array $context) {

  // If user has AD groups.
  if (isset($context["user_data"]["ad_groups"]) && !empty($context["user_data"]["ad_groups"])) {

    Drupal::logger('grants_industries')
      ->debug('User @username, AdGroups: @adgroups',
        [
          '@username' => $account->getAccountName(),
          '@adgroups' => Json::encode($context["user_data"]["ad_groups"]),
        ]);

    $industryKeys = [];
    // Loop them.
    foreach ($context["user_data"]["ad_groups"] as $ad_group) {
      $industryKey = '';
      $ad_group_lower = strtolower($ad_group);
      // @todo remove in prod
      if (str_contains($ad_group_lower, 'owakayttajat')) {
        $industryKey = 'KUVA';
      }
      if (str_contains($ad_group_lower, 'kanslia_kayttajat')) {
        $industryKey = 'KANSLIA';
      }
      // If user has one of the designated groups, set the industry key.
      if (str_contains($ad_group_lower, 'ta_kuva')) {
        $industryKey = 'KUVA';
      }
      if (str_contains($ad_group_lower, 'ta_kasko')) {
        $industryKey = 'KASKO';
      }
      if (str_contains($ad_group_lower, 'pk_pel')) {
        $industryKey = 'PEL';
      }
      if (str_contains($ad_group_lower, 'ta_kymp')) {
        $industryKey = 'KYMP';
      }
      if (str_contains($ad_group_lower, 'ta_sote')) {
        $industryKey = 'SOTE';
      }
      if ($industryKey != '') {
        $industryKeys[] = $industryKey;
      }
    }
    // If we have industry key && user has this field.
    if ($account->hasField('field_industry') && !empty($industryKeys)) {
      // Set field value.
      $account->set('field_industry', $industryKeys);
      try {
        // And try to save account.
        $account->save();
      }
      catch (Exception $e) {
        \Drupal::logger('grants_industries')->error($e->getMessage());
      }
    }
  }

}
