<?php

/**
 * @file
 * Install file.
 */

use Drupal\Core\Entity\EntityStorageException;
use Drupal\grants_handler\Plugin\WebformElement\CompensationsComposite;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\paragraphs\ParagraphInterface;
use Drupal\taxonomy\Entity\Term;

/**
 * Create new terms for avustuslajis.
 */
function grants_metadata_update_9000(&$sandbox) {
  // Name of your vocabulary.
  $vocabulary_name = 'avustuslaji';

  $tids = \Drupal::entityQuery('taxonomy_term')
    ->condition('vid', $vocabulary_name)
    ->execute();

  $term_storage = \Drupal::entityTypeManager()
    ->getStorage('taxonomy_term');
  $entities = $term_storage->loadMultiple($tids);

  $term_storage->delete($entities);

  $query = \Drupal::entityQuery('taxonomy_term');
  $query->condition('vid', $vocabulary_name);
  $query->sort('weight');
  $tids = $query->execute();
  $terms = Term::loadMultiple($tids);

  $subventionTypes = CompensationsComposite::getOptionsForTypes();

  foreach ($subventionTypes as $sid => $name) {
    $existing = array_filter($terms, function ($item) use ($name) {
      return $item->label() == $name;
    });

    if (!empty($existing)) {
      $existingTerm = reset($existing);
      $existingTerm->set('field_subvention_type_id', $sid);
      $existingTerm->save();
      \Drupal::messenger()
        ->addStatus(t('@nodename updated.', ['@nodename' => $existingTerm->label()], ['context' => 'grants_metadata']));
    }
    else {
      $newTerm = Term::create([
        'vid' => 'avustuslaji',
        'name' => $name,
        'field_subvention_type_id' => $sid,
      ]);
      try {
        $newTerm->save();
        \Drupal::messenger()
          ->addStatus(t('@nodename updated.', ['@nodename' => $newTerm->label()], ['context' => 'grants_metadata']));
      }
      catch (EntityStorageException $e) {
      }
    }
  }
}

/**
 * Prepare for platform config v3 update.
 */
function grants_metadata_update_9001(&$sandbox) {

  // Get all paragraphs with centered design.
  $pids = \Drupal::entityQuery('paragraph')
    ->condition('type', 'banner')
    ->condition('field_banner_design', [
      'align-center',
      'align-center-secondary',
    ], "IN")
    ->execute();

  // Load the paragraphs.
  $paragraphs = Paragraph::loadMultiple($pids);

  // Convert to left aligned design.
  /** @var \Drupal\paragraphs\ParagraphInterface $paragraph */
  foreach ($paragraphs as $paragraph) {
    // Only update paragraphs that implement the ParagraphInterface.
    if ($paragraph instanceof ParagraphInterface) {
      // Map the old design values to the new design values.
      $field_update_map = [
        'align-center' => 'align-left',
        'align-center-secondary' => 'align-left-secondary',
      ];

      // Update the 'field_banner_design' field with the new design value and save the paragraph.
      $paragraph
        ->set('field_banner_design', $field_update_map[$paragraph->get('field_banner_design')->value])
        ->save();
    }
  }

  // Delete the already uninstalled module jstimer from system schema table.
  \Drupal::keyValue('system.schema')
    ->delete('jstimer');

  // Initialize the editor.editor.minimal configuration.
  $config_factory = \Drupal::configFactory();
  $editor_minimal = $config_factory->getEditable('editor.editor.minimal');
  $editor_minimal->setData([
    'langcode' => 'en',
    'format' => 'minimal',
    'editor' => 'ckeditor',
  ])->save(TRUE);

  // Prepare for platform config v3 update.
  foreach ([
    'editor.editor.full_html',
    'editor.editor.sidebar',
    'filter.format.full_html',
    'filter.format.minimal',
    'filter.format.plain_text',
    'filter.format.sidebar',
  ] as $configuration) {
    $config = $config_factory->getEditable($configuration);
    $config->set('langcode', 'en')->save();
  }
}
