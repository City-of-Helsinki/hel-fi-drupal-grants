<?php

/**
 * @file
 * Module hooks.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityStorageException;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\grants_handler\ApplicationHandler;
use Drupal\grants_metadata\Validator\EndDateValidator;
use Drupal\grants_metadata\Validator\YearValidator;
use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;
use Drupal\webform\Entity\Webform;

/**
 * Update 3rd party settings so that they can be saved to data.
 *
 * Does not accept date objects.
 *
 * @param array $form
 *   Form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 */
function grants_metadata__validate_third_party_settings(array &$form, FormStateInterface $form_state) {

  // Get config for third party settings.
  $config = \Drupal::config('grants_metadata.settings');
  $thirdPartyOptions = $config->get('third_party_options');

  // Get values from form to get 3rd party settings.
  $formValues = $form_state->getValues();
  /** @var \Drupal\Core\Datetime\DrupalDateTime $applicationOpen */
  $applicationOpen = $formValues["third_party_settings"]["grants_metadata"]["applicationOpen"];
  if ($applicationOpen != NULL) {
    // Transform it to datetime value.
    $formValues["third_party_settings"]["grants_metadata"]["applicationOpen"] = $applicationOpen->format('Y-m-d\TH:i:s');
  }

  $applicationClose = $formValues["third_party_settings"]["grants_metadata"]["applicationClose"];
  if ($applicationClose != NULL) {
    $formValues["third_party_settings"]["grants_metadata"]["applicationClose"] = $applicationClose->format('Y-m-d\TH:i:s');
  }

  // Get selected application type from form.
  $applicationTypeSelect = $formValues["third_party_settings"]["grants_metadata"]["applicationTypeSelect"];
  // Get selected application type from config.
  $applicationTypeSelected = $thirdPartyOptions["application_types"][$applicationTypeSelect];
  // If we have one.
  if ($applicationTypeSelected) {
    // Set third application typ + id from configuration based on selected type.
    $formValues["third_party_settings"]["grants_metadata"]["applicationType"] = $applicationTypeSelected['id'];
    $formValues["third_party_settings"]["grants_metadata"]["applicationTypeID"] = $applicationTypeSelect;
  }

  // Set values back to form state.
  $form_state->setValues($formValues);
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function grants_metadata_node_presave(EntityInterface $entity): void {

  if ($entity->bundle() == 'service') {

    // Only run this hook after creating or editing a service node.
    $route_name = \Drupal::routeMatch()->getRouteName();
    if ($route_name !== 'entity.node.edit_form' &&
        $route_name !== 'node.add') {
      return;
    }

    /** @var \Drupal\Core\Field\Plugin\Field\FieldType\EntityReferenceItem $referenceItem */
    $referenceItem = $entity->get('field_webform')->first();

    if (!$referenceItem) {
      return;
    }

    /** @var \Drupal\Core\Entity\Plugin\DataType\EntityReference $entityReference */
    $entityReference = $referenceItem->get('entity');
    /** @var \Drupal\Core\Entity\Plugin\DataType\EntityAdapter $entityAdapter */
    $entityAdapter = $entityReference->getTarget();
    /** @var \Drupal\Core\Entity\EntityInterface $referencedEntity */
    $referencedEntity = $entityAdapter->getValue();

    if ($referencedEntity) {
      $thirdPartySettings = $referencedEntity->getThirdPartySettings('grants_metadata');
      // Update node values from 3rd party settings.
      grants_metadata_set_node_values($entity, $thirdPartySettings);
    }

  }
}

/**
 * Implements hook_webform_presave().
 */
function grants_metadata_webform_presave(Webform $entity) {
  // Get third aprty settings.
  $thirdPartySettings = $entity->getThirdPartySettings('grants_metadata');

  // Get nodes that have attached this webform.
  try {
    $entityQuery = \Drupal::entityQuery('node')
      // Access checks on content are required.
      ->accessCheck(FALSE)
      ->condition('type', 'service')
      ->condition('field_webform', $entity->id());
    $results = $entityQuery->execute();
  }
  catch (\Exception $e) {
    // Ignore errors during tests.
    return;
  }

  // Load nodes.
  $servicePages = Node::loadMultiple($results);

  foreach ($servicePages as $page) {
    // Update node values from 3rd party settings.
    grants_metadata_set_node_values($page, $thirdPartySettings);
    try {
      // Create a revision and save the node.
      $save_time = \Drupal::time()->getCurrentTime();
      $storage = \Drupal::entityTypeManager()->getStorage('node');
      $author = $page->getOwnerId();
      $page->setRevisionLogMessage('Revision created programmatically.');
      $page->setRevisionCreationTime($save_time);
      $page->setRevisionUserId($author);
      $page = $storage->createRevision($page);
      $page->save();
      \Drupal::messenger()
        ->addStatus(t('Service page @nodetitle updated. Revision created.', ['@nodetitle' => $page->label()], ['context' => 'grants_metadata']));
    }
    catch (EntityStorageException $e) {
      \Drupal::messenger()
        ->addStatus(t('Service page @nodetitle update failed.', ['@nodetitle' => $page->label()], ['context' => 'grants_metadata']));
      \Drupal::messenger()
        ->addStatus(t('Service page @nodetitle updated', ['@nodetitle' => $page->label()], ['context' => 'grants_metadata']));
      \Drupal::logger('grants_metadata')
        ->error('Error saving 3rd party settings to service page. Error: @error', ['@error' => $e->getMessage()]);
    }
  }
}

/**
 * Add configurations from webform to given node.
 *
 * @param \Drupal\node\Entity\Node $page
 *   Node to be edited.
 * @param mixed $thirdPartySettings
 *   Webform third party settings.
 */
function grants_metadata_set_node_values(Node &$page, mixed $thirdPartySettings): void {

  Drupal::messenger()
    ->addStatus(t('Updating service @nodetype from webform values', ['@nodetype' => $page->getTitle()]));

  // Applicant types.
  if (!empty($thirdPartySettings["applicantTypes"])) {
    $applicantTypes = $thirdPartySettings["applicantTypes"];
    if (!is_array($applicantTypes)) {
      $applicantTypes = [$applicantTypes];
    }
    $page->set('field_hakijatyyppi', array_values($applicantTypes));
  }
  // Type terms.
  if (!empty($thirdPartySettings["applicationTypeTerms"])) {
    $tids = array_values($thirdPartySettings["applicationTypeTerms"]);
    $terms = Term::loadMultiple($tids);
    $page->set('field_avustuslaji', $terms);
  }
  $applicationOpenStr = strtotime($thirdPartySettings["applicationOpen"]);
  $applicationOpenDate = DrupalDateTime::createFromFormat('U', $applicationOpenStr, 'Europe/Helsinki');
  $applicationOpenDateFormat = $applicationOpenDate->format('Y-m-d\TH:i:s');

  $applicationCloseStr = strtotime($thirdPartySettings["applicationClose"]);
  $applicationCloseDate = DrupalDateTime::createFromFormat('U', $applicationCloseStr, 'Europe/Helsinki');
  $applicationCloseDateFormat = $applicationCloseDate->format('Y-m-d\TH:i:s');

  // If we have open time, assume that end time is added as well and
  // use them as is.
  if (!empty($thirdPartySettings["applicationOpen"])) {
    $page->set('field_application_period',
      [
        'value' => $applicationOpenDateFormat,
        'end_value' => $applicationCloseDateFormat,
      ]);
  }
  // Set the available acting years.
  $page->set('field_application_acting_years', $thirdPartySettings['applicationActingYears']);
  $page->set('field_acting_years_type', $thirdPartySettings['applicationActingYearsType'] ?? 'fixed');
  $page->set('field_acting_years_next_count', $thirdPartySettings['applicationActingYearsNextCount'] ?? NULL);

  // If application is set to be continuous, mark it to node as well.
  if ($thirdPartySettings["applicationContinuous"] == 1) {
    $page->set('field_application_continuous', '1');
  }
  else {
    // If not, set it false.
    $page->set('field_application_continuous', '0');
  }
  // Set target group.
  if (!empty($thirdPartySettings["applicationTargetGroup"])) {
    $term = Term::load($thirdPartySettings["applicationTargetGroup"]);
    $page->set('field_target_group', $term);
  }
  // Set target group.
  if (!empty($thirdPartySettings["applicationIndustry"])) {
    $page->set('field_industry', $thirdPartySettings["applicationIndustry"]);
  }
}

/**
 * Callback for getting options for industry field from configuration.
 *
 * @return array
 *   Options for industry dropdown.
 */
function grants_metadata_field_industry_options(): array {
  $config = \Drupal::config('grants_metadata.settings');
  $thirdPartyOptions = $config->get('third_party_options');
  return $thirdPartyOptions['application_industries'];
}

/**
 * Alter form.
 */
function grants_metadata_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  _grants_metadata_handle_admin_webform_alter($form, $form_state, $form_id);

  if ($form_id == 'webform_settings_form' || $form_id == 'webform_add_form' || $form_id == 'webform_duplicate_form') {

    $isDuplicateForm = $form_id === 'webform_duplicate_form';
    $bundle = $form_state->getFormObject()->getEntity();

    $config = \Drupal::config('grants_metadata.settings');
    $thirdPartyOptions = $config->get('third_party_options');
    $form['#attached']['drupalSettings'] = $thirdPartyOptions;

    $form["#validate"][] = 'grants_metadata__validate_third_party_settings';

    // Because hidden by default.
    $form["third_party_settings"]["#access"] = TRUE;
    $form['third_party_settings']['#tree'] = TRUE;

    $form['third_party_settings']['grants_metadata'] = [
      '#type' => 'details',
      '#title' => t('Application details', [], ['context' => 'grants_metadata']),
      '#open' => TRUE,
      '#input' => FALSE,
    ];

    $applicationTypeOptions = [];
    foreach ($thirdPartyOptions['application_types'] as $typeId => $type) {
      $applicationTypeOptions[$typeId] = $type['labels']['fi'];
    }

    $form['third_party_settings']['grants_metadata']['applicationTypeSelect'] = [
      '#type' => 'select',
      '#title' => t('Application Type', [], ['context' => 'grants_metadata']),
      '#default_value' => $bundle->getThirdPartySetting('grants_metadata', 'applicationTypeID'),
      '#options' => $applicationTypeOptions,
      '#required' => TRUE,
    ];

    $form['third_party_settings']['grants_metadata']['applicationType'] = [
      '#type' => 'textfield',
      '#title' => t('Application Type', [], ['context' => 'grants_metadata']),
      '#default_value' => $bundle->getThirdPartySetting('grants_metadata', 'applicationType'),
      '#disabled' => TRUE,
    ];

    $form['third_party_settings']['grants_metadata']['applicationTypeID'] = [
      '#type' => 'textfield',
      '#title' => t('Application Type ID', [], ['context' => 'grants_metadata']),
      '#default_value' => $bundle->getThirdPartySetting('grants_metadata', 'applicationTypeID'),
      '#disabled' => TRUE,
    ];

    $form['third_party_settings']['grants_metadata']['applicationIndustry'] = [
      '#type' => 'select',
      '#title' => t('Grants industry', [], ['context' => 'grants_metadata']),
      '#default_value' => $bundle->getThirdPartySetting('grants_metadata', 'applicationIndustry'),
      '#options' => $thirdPartyOptions['application_industries'],
      '#required' => TRUE,
    ];

    $form['third_party_settings']['grants_metadata']['applicantTypes'] = [
      '#type' => 'select',
      '#title' => t('Applicant types', [], ['context' => 'grants_metadata']),
      '#default_value' => $bundle->getThirdPartySetting('grants_metadata', 'applicantTypes'),
      '#options' => $thirdPartyOptions['applicant_types'],
      '#required' => TRUE,
      '#multiple' => TRUE,
    ];

    $language = \Drupal::languageManager()->getCurrentLanguage()->getId();

    // Load the taxonomy terms.
    $terms = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->loadByProperties([
        'vid' => 'avustuslaji',
      ]);

    // Build options list.
    $termOptions = [];
    foreach ($terms as $term) {
      if ($term->hasTranslation($language)) {
        $translated_term = \Drupal::service('entity.repository')->getTranslationFromContext($term, $language);
        $termOptions[$term->id()] = $translated_term->label();
      }
      else {
        $termOptions[$term->id()] = $term->label();
      }
    }

    $form['third_party_settings']['grants_metadata']['applicationTypeTerms'] = [
      '#type' => 'select',
      '#title' => t('Subvention type', [], ['context' => 'grants_metadata']),
      '#default_value' => $bundle->getThirdPartySetting('grants_metadata', 'applicationTypeTerms'),
      '#options' => $termOptions,
      '#multiple' => TRUE,
      '#required' => TRUE,
    ];

    // Load the taxonomy terms.
    $terms = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->loadByProperties([
        'vid' => 'target_group',
      ]);

    // Build options list.
    $termOptions = [];
    foreach ($terms as $term) {
      if ($term->hasTranslation($language)) {
        $translated_term = \Drupal::service('entity.repository')->getTranslationFromContext($term, $language);
        $termOptions[$term->id()] = $translated_term->label();
      }
      else {
        $termOptions[$term->id()] = $term->label();
      }
    }

    $form['third_party_settings']['grants_metadata']['applicationTargetGroup'] = [
      '#type' => 'select',
      '#title' => t('Application target group', [], ['context' => 'grants_metadata']),
      '#default_value' => $bundle->getThirdPartySetting('grants_metadata', 'applicationTargetGroup'),
      '#options' => $termOptions,
      '#required' => TRUE,
    ];

    $openValue = $bundle->getThirdPartySetting('grants_metadata', 'applicationOpen');
    if ($openValue != NULL) {
      $applicationOpenDate = DrupalDateTime::createFromFormat('Y-m-d\TH:i:s', $openValue, 'Europe/Helsinki');
    }
    else {
      $applicationOpenDate = '';
    }

    $form['third_party_settings']['grants_metadata']['applicationOpen'] = [
      '#type' => 'datetime',
      '#title' => t('Application opens', [], ['context' => 'grants_metadata']),
      '#default_value' => $applicationOpenDate,
    ];

    $closeValue = $bundle->getThirdPartySetting('grants_metadata', 'applicationClose');
    if ($closeValue != NULL) {
      $applicationCloseDate = DrupalDateTime::createFromFormat('Y-m-d\TH:i:s', $closeValue, 'Europe/Helsinki');
    }
    else {
      $applicationCloseDate = '';
    }

    $form['third_party_settings']['grants_metadata']['applicationClose'] = [
      '#type' => 'datetime',
      '#title' => t('Application closes', [], ['context' => 'grants_metadata']),
      '#default_value' => $applicationCloseDate,
    ];

    $current_year = (int) date("Y");
    for ($i = 0; $i <= 10; $i++) {
      $actingYearOptions[$current_year + $i] = $current_year + $i;
    }

    $actingYearValues = $bundle->getThirdPartySetting('grants_metadata', 'applicationActingYears');
    if ($actingYearValues != NULL) {
      $applicationActingYears = $actingYearValues;
    }
    else {
      // Default value (this year + 2 years)
      $applicationActingYears = [];
      for ($i = 0; $i <= 2; $i++) {
        $applicationActingYears[] = $current_year + $i;
      }
    }

    $yearsType = $bundle->getThirdPartySetting('grants_metadata', 'applicationActingYearsType') ?? 'fixed';
    $form['third_party_settings']['grants_metadata']['applicationActingYearsType'] = [
      '#type' => 'radios',
      '#title' => 'Acting year type',
      '#required' => TRUE,
      '#options' => [
        'fixed' => t('Fixed years', [], ['context' => 'grants_metadata']),
        'current_and_next_x_years' => t('Current year and next X years', [], ['context' => 'grants_metadata']),
        'next_x_years' => t('Next X years', [], ['context' => 'grants_metadata']),
      ],
      '#default_value' => $yearsType,
    ];

    $form['third_party_settings']['grants_metadata']['applicationActingYears'] = [
      '#type' => 'select',
      '#title' => t('Available acting years', [], ['context' => 'grants_metadata']),
      '#default_value' => $applicationActingYears,
      '#options' => $actingYearOptions,
      '#multiple' => TRUE,
      '#states' => [
        'visible' => [
          'input[name="third_party_settings[grants_metadata][applicationActingYearsType]"]' => ['value' => 'fixed'],
        ],
        'required' => [
          'input[name="third_party_settings[grants_metadata][applicationActingYearsType]"]' => ['value' => 'fixed'],
        ],
      ],
    ];

    $yearsCount = $bundle->getThirdPartySetting('grants_metadata', 'applicationActingYearsNextCount') ?? 1;
    $form['third_party_settings']['grants_metadata']['applicationActingYearsNextCount'] = [
      '#type' => 'number',
      '#step' => 1,
      '#title' => 'Number of upcoming years to show',
      '#min' => 0,
      '#states' => [
        'visible' => [
          'input[name="third_party_settings[grants_metadata][applicationActingYearsType]"]' => ['!value' => 'fixed'],
        ],
        'required' => [
          'input[name="third_party_settings[grants_metadata][applicationActingYearsType]"]' => ['!value' => 'fixed'],
        ],
      ],
      '#default_value' => $yearsCount,
    ];

    $form['third_party_settings']['grants_metadata']['applicationContinuous'] = [
      '#type' => 'checkbox',
      '#title' => t('Is application continuous', [], ['context' => 'grants_metadata']),
      '#default_value' => $bundle->getThirdPartySetting('grants_metadata', 'applicationContinuous'),
    ];

    $form['third_party_settings']['grants_metadata']['disableCopying'] = [
      '#type' => 'checkbox',
      '#title' => t('Disable copying for this application', [], ['context' => 'grants_metadata']),
      '#default_value' => $bundle->getThirdPartySetting('grants_metadata', 'disableCopying'),
    ];

    $formStatus = $bundle->getThirdPartySetting('grants_metadata', 'status');
    $formParent = $bundle->getThirdPartySetting('grants_metadata', 'parent');

    if ($isDuplicateForm) {
      $storage = $form_state->getStorage();
      $formParent = $storage['parent_form'];
      $formStatus = 'development';

      /** @var \Drupal\webform\Entity\Webform[] $webforms */
      $formParentData = reset(\Drupal::entityTypeManager()
        ->getStorage('webform')
        ->loadByProperties([
          'uuid' => $formParent,
        ]));

      if ($formParentData) {
        $parentIndustry = $formParentData->getThirdPartySetting('grants_metadata', 'applicationIndustry');
        $parentType = $formParentData->getThirdPartySetting('grants_metadata', 'applicationType');
        $parentFormId = $formParentData->id();

        if (preg_match('/\d+$/', $parentFormId, $matches)) {
          $versionNumber = (int) $matches[0] + 1;
        }
        else {
          $versionNumber = 1;
        }

        $suggestedFormId = str_replace(
          ['@industry', '@type', '@number'],
          [strtolower($parentIndustry), strtolower($parentType), $versionNumber],
          '@industry_@type_@number'
        );

        $form['id']['#default_value'] = $suggestedFormId;
      }

    }

    $webforms = \Drupal::entityTypeManager()
      ->getStorage('webform')
      ->loadMultiple();

    $parentOptions = [];

    /** @var \Drupal\webform\Entity\Webform[] $webforms */
    foreach ($webforms as $webform) {
      $parentOptions[$webform->uuid()] = $webform->get('title');
    }

    $form['third_party_settings']['grants_metadata']['status'] = [
      '#type' => 'radios',
      '#title' => t('Status'),
      '#options' => [
        'released' => t('In production'),
        'archived' => t('Archived'),
        'development' => t('In development'),
      ],
      '#required' => TRUE,
      '#default_value' => $formStatus ?? 'development',
      '#description' => t('If form is in production, then no editing is allowed and form results are submitted to ATV. Work in development form opens up for testing & developing but not for general public.'),
    ];

    $form['third_party_settings']['grants_metadata']['parent'] = [
      '#type' => 'select',
      '#title' => t('Parent'),
      '#description' => t('Parent form, if this webform was duplicated or replaces existing form.'),
      '#options' => $parentOptions,
      '#default_value' => $formParent,
      '#disabled' => $isDuplicateForm,
      '#required' => $isDuplicateForm,
      '#empty_option' => t('- None -'),
      '#empty_value' => '',
    ];
  }
}

/**
 * Admin webform permission checks and alters.
 */
function _grants_metadata_handle_admin_webform_alter(&$form, FormStateInterface $form_state, $form_id) {

  $form_ids = [
    'webform_settings_access_form',
    'webform_handlers_form',
    'webform_settings_confirmation_form',
    'webform_settings_submissions_form',
    'webform_settings_form_form',
    'webform_settings_form',
    'webform_duplicate_form',
    'webform_edit_form',
    'webform_ui_element_form',
  ];

  if (!in_array($form_id, $form_ids)) {
    return;
  }

  $routeParam = \Drupal::routeMatch()->getParameter('webform');
  $formStatus = $routeParam->getThirdPartySetting('grants_metadata', 'status');

  $currentUser = Drupal::currentUser();
  $isAdmin = ApplicationHandler::isGrantAdmin($currentUser);

  $released = $formStatus === 'released';
  $archived = $formStatus === 'archived';
  $editingRestricted = ($released || $archived) && !$isAdmin;
  $restrictionMsg = $released ?
  t('Form is published for production use, only limited editing is allowed.') :
  t('Form is archived and editing is not allowed.');

  switch ($form_id) {

    case 'webform_settings_access_form':
    case 'webform_handlers_form':
    case 'webform_settings_confirmation_form':
    case 'webform_settings_submissions_form':
    case 'webform_settings_form_form':
    case 'webform_settings_form':
      if ($editingRestricted && !$isAdmin) {
        $form['#disabled'] = TRUE;

        \Drupal::messenger()
          ->addWarning($restrictionMsg);

        if ($form_id == 'webform_handlers_form') {
          $form['handlers']['#access'] = FALSE;
          \Drupal::messenger()
            ->addWarning(t('Handlers form has been removed due to no access.'));
        }
        if ($form_id == 'webform_edit_form') {
          $form['webform_ui_elements']['#access'] = FALSE;
          \Drupal::messenger()
            ->addWarning(t('Elements form has been removed due to no access.'));
        }
      }

      break;

    case 'webform_duplicate_form':
      // Storage original UUID.
      // On succesful creation. Update original to archived/closed etc.
      $routeParam = \Drupal::routeMatch()->getParameter('webform');
      $storage = $form_state->getStorage();
      $storage['parent_form'] = $routeParam->uuid() ?? NULL;
      $form_state->setStorage($storage);

      $form['actions']['submit']['#submit'][] = '_grants_metadata_duplicate_form_submit';
      break;

    case 'webform_edit_form':
      if ($archived) {
        \Drupal::messenger()
          ->addWarning($restrictionMsg);
        $form['#disabled'] = TRUE;
        $form['webform_ui_elements']['#access'] = FALSE;
      }
      if ($editingRestricted) {
        \Drupal::messenger()
          ->addWarning($restrictionMsg);
        $form['webform_ui_elements']['#header']['#access'] = FALSE;
        foreach ($form['webform_ui_elements'] as $key => $element) {
          if (!is_array($element)) {
            continue;
          }
          unset($form['webform_ui_elements'][$key]['add']);
          unset($form['webform_ui_elements'][$key]['operations']['#links']['delete']);
          unset($form['webform_ui_elements'][$key]['operations']['#links']['duplicate']);
        }
      }
      break;

    case 'webform_ui_element_form':
      unset($form['delete']);
      unset($form['actions']['delete']);
      break;
  }
}

/**
 * Custom submit handler for form duplicate form.
 */
function _grants_metadata_duplicate_form_submit($form, FormStateInterface &$form_state) {

  $storage = $form_state->getStorage();

  $parentFormUuid = $storage['parent_form'] ?? NULL;
  if (!$parentFormUuid) {
    return;

  }

  /** @var \Drupal\webform\Entity\Webform[] */
  $query = \Drupal::entityTypeManager()
    ->getStorage('webform')
    ->loadByProperties([
      'uuid' => $parentFormUuid,
    ]);

  $parentForm = reset($query);

  if (!$parentForm) {
    return;
  }

  $parentForm->setThirdPartySetting('grants_metadata', 'status', 'archived');
  $parentForm->set('archive', TRUE);
  $parentForm->save();

  $newFormId = $form_state->getValue('id');
  $newFormObject = Webform::load($newFormId);

  // // @DEV: We might need do this an another way?
  // _grants_metadata_update_webform_references($parentForm, $newFormObject);
  // grants_metadata_webform_presave($newFormObject);
}

/**
 * Updates service page webform references to duplicated form.
 *
 * @param \Drupal\webform\Entity\Webform $originalForm
 *   Original webform object.
 * @param \Drupal\webform\Entity\Webform $newForm
 *   Duplicated webform object.
 */
function _grants_metadata_update_webform_references(Webform $originalForm, Webform $newForm) {
  // Get nodes that have attached the previous version.
  try {
    $entityQuery = \Drupal::entityQuery('node')
        // Access checks on content are required.
      ->accessCheck(FALSE)
      ->condition('type', 'service')
      ->condition('field_webform', $originalForm->id());

    $results = $entityQuery->execute();
    $servicePages = Node::loadMultiple($results);

    // Update reference to new form.
    foreach ($servicePages as $servicePage) {
      $servicePage->set('field_webform', $newForm->id());
      $servicePage->save();
    }
  }
  catch (\Exception $e) {
    // Ignore errors during tests.
    return;
  }

}

/**
 * Implements hook_form_FORM_ID_alter() for node_service_edit_form.
 *
 * Disable certain fields if a webform is selected.
 */
function grants_metadata_form_node_service_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $stateCondition = ['select[name="field_webform[0][target_id]"]' => ['filled' => FALSE]];
  $hiddenFields = [
    'field_avustuslaji',
    'field_industry',
    'field_avustuslaji',
    'field_target_group',
    'field_hakijatyyppi',
    'field_application_period',
    'field_application_continuous',
    'field_application_acting_years',
    'field_acting_years_type',
    'field_acting_years_next_count',
  ];
  foreach ($hiddenFields as $fieldName) {
    $form[$fieldName]['#states'] = [
      'enabled' => $stateCondition,
    ];
  }

  // Hide webform specific settings.
  $form['field_webform']['widget'][0]['settings']['#access'] = FALSE;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function grants_metadata_preprocess_block(&$variables) {

  // Also invalidate breadcrumb cache.
  if ($variables["plugin_id"] == 'system_breadcrumb_block') {
    $variables["elements"]["#cache"]["contexts"][] = 'user';
    $variables["content"]["#cache"]["contexts"][] = 'user';

    $variables["content"]["#cache"]["max-age"] = 0;
    $variables["elements"]["#cache"]["max-age"] = 0;
  }
}

/**
 * Implements hook_webform_access().
 */
function grants_metadata_webform_access(Webform $entity, string $operation, AccountInterface $account) {
  $isAdmin = ApplicationHandler::isGrantAdmin($account);
  $restrictedOps = ['duplicate', 'delete', 'test'];

  if (in_array($operation, $restrictedOps) && !$isAdmin) {
    return AccessResult::forbidden();
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_webform_element_alter().
 */
function grants_metadata_webform_element_alter(array &$element, FormStateInterface $form_state, array $context): void {
  if (isset($element['#webform_id'])) {

    if (str_contains($element['#webform_id'], '--myonnetty_avustus') ||
        str_contains($element['#webform_id'], '--haettu_avustus_tieto')) {
      $element['#element_validate'][] = [
        YearValidator::class,
        'validate',
      ];
    }

    $end_date_validator_elements = [
      'liikunta_tapahtuma--paattyy',
      'nuorisotoiminta_projektiavustush--projekti_loppuu',
      'kasko_ip_lisa--paattyy',
      'kuva_projekti--hanke_loppuu',
      'taide_ja_kulttuuri_kehittamisavu--hanke_loppuu',
    ];

    if (in_array($element['#webform_id'], $end_date_validator_elements)) {
      $element['#element_validate'][] = [
        EndDateValidator::class,
        'validate',
      ];
    }
  }
}
