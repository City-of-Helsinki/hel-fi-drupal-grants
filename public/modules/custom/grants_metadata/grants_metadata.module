<?php

/**
 * @file
 * Module hooks.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Alter form.
 */
function grants_metadata_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'webform_settings_form' || $form_id == 'webform_add_form' || $form_id == 'webform_duplicate_form') {
    $bundle = $form_state->getFormObject()->getEntity();
    // Because hidden by default.
    $form["third_party_settings"]["#access"] = TRUE;
    $form['third_party_settings']['#tree'] = TRUE;

    $form['third_party_settings']['grants_metadata'] = [
      '#type' => 'details',
      '#title' => t('Application details'),
      '#open' => TRUE,
      '#input' => FALSE,
    ];

    $form['third_party_settings']['grants_metadata']['applicationType'] = [
      '#type' => 'textfield',
      '#title' => t('Application Type'),
      '#default_value' => $bundle->getThirdPartySetting('grants_metadata', 'applicationType'),
      '#required' => TRUE,
    ];

    $form['third_party_settings']['grants_metadata']['applicationTypeID'] = [
      '#type' => 'textfield',
      '#title' => t('Application Type ID'),
      '#default_value' => $bundle->getThirdPartySetting('grants_metadata', 'applicationTypeID'),
      '#required' => TRUE,
    ];

    $applicantTypes = [
      'registered_community' => 'Rekisteröity yhdistys',
      'unregistered_community' => 'Rekisteröimätön yhdistys',
      'private_person' => 'Yksityishenkilö',
    ];
    $form['third_party_settings']['grants_metadata']['applicantTypes'] = [
      '#type' => 'select',
      '#title' => t('Applicant types'),
      '#default_value' => $bundle->getThirdPartySetting('grants_metadata', 'applicantTypes'),
      '#options' => $applicantTypes,
      '#required' => TRUE,
    ];

    // Load the taxonomy terms.
    $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties([
      'vid' => 'avustuslaji',
    ]);
    // Build options list.
    $termOptions = [];
    foreach ($terms as $term) {
      $termOptions[$term->id()] = $term->label();
    }

    $form['third_party_settings']['grants_metadata']['applicationTypeTerms'] = [
      '#type' => 'select',
      '#title' => t('Application Type terms'),
      '#default_value' => $bundle->getThirdPartySetting('grants_metadata', 'applicationTypeTerms'),
      '#options' => $termOptions,
      '#required' => TRUE,
    ];

    $form['third_party_settings']['grants_metadata']['applicationOpen'] = [
      '#type' => 'datetime',
      '#title' => t('Application opens'),
      '#default_value' => $bundle->getThirdPartySetting('grants_metadata', 'applicationOpen'),
//      '#required' => TRUE,
    ];
    $form['third_party_settings']['grants_metadata']['applicationClose'] = [
      '#type' => 'datetime',
      '#title' => t('Application closes'),
      '#default_value' => $bundle->getThirdPartySetting('grants_metadata', 'applicationClose'),
//      '#required' => TRUE,
    ];
    $form['third_party_settings']['grants_metadata']['applicationContinuous'] = [
      '#type' => 'checkbox',
      '#title' => t('Is application continuous'),
      '#default_value' => $bundle->getThirdPartySetting('grants_metadata', 'applicationContinuous'),
    ];


  }
}

/**
 * Implements hook_batch_alter().
 */

/**
 * Implements hook_preprocess_HOOK().
 */
function grants_metadata_preprocess_block(&$variables) {

  // Also invalidate breadcrumb cache.
  if ($variables["plugin_id"] == 'system_breadcrumb_block') {
    $variables["elements"]["#cache"]["contexts"][] = 'user';
    $variables["content"]["#cache"]["contexts"][] = 'user';

    $variables["content"]["#cache"]["max-age"] = 0;
    $variables["elements"]["#cache"]["max-age"] = 0;
  }
}
