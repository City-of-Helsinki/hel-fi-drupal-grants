<?php

/**
 * @file
 * Primary module hooks for Grants Profile module.
 *
 * @DCG
 * This file is no longer required in Drupal 8.
 * @see https://www.drupal.org/node/2217931
 */

use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\grants_profile\Form\GrantsProfileFormRegisteredCommunity;

/**
 * Implements hook_theme().
 */
function grants_profile_theme(): array {
  $theme['delete_button_link'] = [
    'render element' => 'build',
    'variables' => [
      'attributes' => NULL,
      'button_type' => NULL,
      'icon_right' => NULL,
      'icon_left' => NULL,
      'text_label' => NULL,
      'url' => NULL,
    ],
  ];
  $theme['view_application'] = [
    'render element' => 'build',
    'variables' => [
      'application' => NULL,
      'submission_form' => NULL,
    ],
  ];
  $theme['own_profile_unregistered_community'] = [
    'render element' => 'build',
    'variables' => [
      'profile' => NULL,
      'basic_info' => NULL,
      'userData' => NULL,
      'editProfileLink' => NULL,
      'deleteProfileLink' => NULL,
      'roles' => NULL,
    ],
  ];
  $theme['own_profile_registered_community'] = [
    'render element' => 'build',
    'variables' => [
      'profile' => NULL,
      'userData' => NULL,
      'editProfileLink' => NULL,
    ],
  ];

  $theme['own_profile_private_person'] = [
    'render element' => 'build',
    'variables' => [
      'profile' => NULL,
      'basic_info' => NULL,
      'userData' => NULL,
      'editProfileLink' => NULL,
      'editHelsinkiProfileLink' => NULL,
    ],
  ];

  $theme['edit_own_profile'] = [
    'render element' => 'build',
    'variables' => [
      'profileForm' => NULL,
    ],
  ];

  $theme['own_profile_form'] = [
    'render element' => 'form',
  ];

  $theme['own_profile_form_private_person'] = [
    'render element' => 'form',
  ];
  $theme['own_profile_form_unregistered_community'] = [
    'render element' => 'form',
  ];
  $theme['own_profile_form_registered_community'] = [
    'render element' => 'form',
  ];

  $theme['block__grants_profile_menuitem'] = [
    'render element' => 'build',
    'template' => 'block--grants-profile-menuitem',
    'base hook' => 'block',
    'variables' => [
      'initials' => NULL,
      'notifications' => NULL,
    ],
  ];
  $theme['edit-label-with-icon'] = [
    'variables' => [
      'icon' => NULL,
      'text_label' => NULL,
    ],
  ];
  $theme['grants_profile__basic_info__private_person'] = [
    'render element' => 'build',
    'template' => 'grants-profile--basic-info--private-person',
    'variables' => [
      'myProfile' => NULL,
      'editHelsinkiProfileLink' => NULL,
      'updatelink' => NULL,
    ],
  ];

  return $theme;
}

/**
 * Implements hook_form_alter().
 */
function grants_profile_form_alter(&$form, FormStateInterface $form_state, $form_id): void {

  // Hide fields from login forms without proper query strings.
  // If we're at user login.
  if ($form_id == 'user_login_form') {
    $qParams = \Drupal::request()->query->all();
    // We want to hide all normal login elements
    // to only allow login via Tunnistamo.
    if (!isset($qParams['login']) || $qParams['login'] != 'admin') {
      unset($form['name']);
      unset($form['pass']);
      unset($form['actions']);
    }
  }
  // And from Tunnistamo, we want to allow only user logins
  // without loginparameter.
  if ($form_id == 'openid_connect_login_form') {
    $qParams = \Drupal::request()->query->all();

    if (!isset($qParams['login']) || $qParams['login'] != 'admin') {
      unset($form["openid_connect_client_tunnistamoadmin_login"]);
    }

  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function grants_profile_preprocess_own_profile_registered_community(&$variables): void {

  $initials = NULL;
  $name = $variables['profile']['companyName'] ?? '';
  $words = explode(' ', $name);
  if (count($words) >= 2) {
    $initials = strtoupper(substr($words[0], 0, 1) . substr(end($words), 0, 1));
  }
  else {
    preg_match_all('#([A-Z]+)#', $name, $capitals);
    if (count($capitals[1]) >= 2) {
      $initials = substr(implode('', $capitals[1]), 0, 2);
    }
    else {
      $initials = strtoupper(substr($name, 0, 2));
    }

  }
  $build['#initials'] = $initials;
  $build['#colorscheme'] = 0;

  $officialRoles = GrantsProfileFormRegisteredCommunity::getOfficialRoles();

  foreach ($variables['profile']['officials'] as $key => $official) {
    $variables['profile']['officials'][$key]['officialRole'] = $officialRoles[(int) $official['role']];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function grants_profile_preprocess_input(&$variables) {
  if ($variables['theme_hook_original'] == 'input__submit') {
    if (isset($variables['element']['#is_supplementary'])) {
      $variables['is_supplementary'] = $variables['element']['#is_supplementary'];
    }
    if (isset($variables['element']['#icon_left'])) {
      $variables['icon_left'] = $variables['element']['#icon_left'];
    }
    if (isset($variables['element']['#icon_right'])) {
      $variables['icon_right'] = $variables['element']['#icon_right'];
    }
    if (isset($variables['element']['#text_label'])) {
      $variables['text_label'] = $variables['element']['#text_label'];
    }
    elseif (isset($variables['element']['#value'])) {
      $variables['text_label'] = $variables['element']['#value'];
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @throws \GuzzleHttp\Exception\GuzzleException
 */
function grants_profile_preprocess_own_profile_form(&$variables) {

  // Get profile data from parent form.
  $variables['profile'] = $variables["form"]["#profilecontent"];
  // Unset just in case.
  unset($variables["form"]["#profilecontent"]);
  $variables["form"]['#attached']['library'][] = 'grants_profile/profile_dialog';

}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @throws \GuzzleHttp\Exception\GuzzleException
 */
function grants_profile_preprocess_own_profile_form_unregistered_community(&$variables) {

  // Get profile data from parent form.
  $variables['profile'] = $variables["form"]["#profilecontent"];

  $variables['basic_info'] = $variables["form"]["#basic_info"];
  $variables['basic_info']['#updatelink'] = $variables["form"]["updatelink"];
  $variables["form"]['#attached']['library'][] = 'grants_profile/profile_dialog';

  // Unset just in case.
  unset($variables["form"]["#profilecontent"]);

}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @throws \GuzzleHttp\Exception\GuzzleException
 */
function grants_profile_preprocess_own_profile_form_private_person(&$variables) {

  // Get profile data from parent form.
  // Get profile data from parent form.
  $variables['profile'] = $variables["form"]["#helsinkiprofilecontent"];

  // Unset just in case.
  unset($variables["form"]["#helsinkiprofilecontent"]);

  $variables['basic_info'] = $variables["form"]["#basic_info"];
  $variables['basic_info']['#updatelink'] = $variables["form"]["updatelink"];
  $variables["form"]['#attached']['library'][] = 'grants_profile/profile_dialog';

}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @throws \GuzzleHttp\Exception\GuzzleException
 */
function grants_profile_preprocess_own_profile_private_person(&$variables) {
  $tOpts = ['context' => 'grants_profile'];

  $profileEditUrl = Url::fromUri(getenv('HELSINKI_PROFIILI_URI'));
  $profileEditUrl->mergeOptions([
    'attributes' => [
      'title' => t('If you want to change the information from Helsinki-profile
you can do that by going to the Helsinki-profile from this link.', [], $tOpts),
      'target' => '_blank',
    ],
  ]);
  $editHelsinkiProfileLink = Link::fromTextAndUrl(t('Go to the Helsinki profile to update your email address.',
    [], $tOpts), $profileEditUrl);
  $helsinkiProfiiliDataService = \Drupal::service('helfi_helsinki_profiili.userdata');
  $helsinkiProfileContent = $helsinkiProfiiliDataService->getUserProfileData();

  $variables['basic_info'] = [
    '#theme' => 'grants_profile__basic_info__private_person',
    '#myProfile' => $helsinkiProfileContent['myProfile'],
    '#editHelsinkiProfileLink' => $editHelsinkiProfileLink,
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @throws \GuzzleHttp\Exception\GuzzleException
 */
function grants_profile_preprocess_own_profile_unregistered_community(&$variables) {
  $tOpts = ['context' => 'grants_profile'];

  $profileEditUrl = Url::fromUri(getenv('HELSINKI_PROFIILI_URI'));
  $profileEditUrl->mergeOptions([
    'attributes' => [
      'title' => t('If you want to change the information from Helsinki-profile
you can do that by going to the Helsinki-profile from this link.', [], $tOpts),
      'target' => '_blank',
    ],
  ]);
  $editHelsinkiProfileLink = Link::fromTextAndUrl(t('Go to Helsinki-profile to edit your information.',
    [], $tOpts), $profileEditUrl);
  $helsinkiProfiiliDataService = \Drupal::service('helfi_helsinki_profiili.userdata');
  $helsinkiProfileContent = $helsinkiProfiiliDataService->getUserProfileData();

  $variables['basic_info'] = [
    '#theme' => 'grants_profile__basic_info__private_person',
    '#myProfile' => $helsinkiProfileContent['myProfile'],
    '#editHelsinkiProfileLink' => $editHelsinkiProfileLink,
    '#roles' => GrantsProfileFormRegisteredCommunity::getOfficialRoles(),
  ];
}

/**
 * Implements hook_block_view_BASE_BLOCK_ID_alter().
 */
function grants_profile_block_view_profile_block_alter(array &$build, BlockPluginInterface $block) {
  $build['#pre_render'][] = function (array $build) {
    $build['content']['#extra_links'] = [
      [
        'url' => Url::fromRoute('grants_profile.show'),
        'text' => 'Show profile',
        'attributes' => [
          'class' => [
            'grants-profile--menuitem--mandate',
          ],
        ],
      ],
      [
        'url' => Url::fromRoute('grants_mandate.mandateform'),
        'text' => 'Switch role',
        'attributes' => [
          'class' => [
            'grants-profile--menuitem--switch-role',
          ],
        ],
      ],
    ];
    return $build;
  };
}

/**
 * Implements hook_theme_registry_alter().
 */
function grants_profile_theme_registry_alter(&$theme_registry) {
  $theme_registry['profile_block']['variables']['extra_links'] = NULL;
}

/**
 * Implements hook_preprocess_page().
 */
function grants_profile_preprocess_page(&$vars) {
  $route_name = \Drupal::routeMatch()->getRouteName();

  // Check for user login or access denied pages.
  if ($route_name === 'user.login' || $route_name === 'system.403' || $route_name === 'system.401') {
    $block_ids = \Drupal::entityQuery('block_content')
      ->condition('field_login_type', 0)
      ->accessCheck(FALSE)
      ->execute();

    $blocks = \Drupal::entityTypeManager()->getStorage('block_content')->loadMultiple($block_ids);

    foreach ($blocks as $b) {
      $vars['page']['login_block'][] = \Drupal::entityTypeManager()
        ->getViewBuilder('block_content')->view($b);
    }
  }
}

/**
 * Implements hook_user_delete().
 */
function grants_profile_user_delete($account) {
  // Make sure that user sessions are removed after deleting them.
  $database = \Drupal::service('database');
  $database->delete('sessions')
    ->condition('uid', $account->id())
    ->execute();
}
