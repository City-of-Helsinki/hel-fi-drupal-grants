<?php

/**
 * @file
 * Primary module hooks for Grants Profile module.
 *
 * @DCG
 * This file is no longer required in Drupal 8.
 * @see https://www.drupal.org/node/2217931
 */

use Drupal\user\UserInterface;

/**
 * OpenID Connect post authorize hook.
 *
 * This hook runs after a user has been authorized and claims have been mapped
 * to the user's account.
 *
 * A popular use case for this hook is to saving token and additional identity
 * provider related information to the user's Drupal session (private temp
 * store).
 *
 * @param \Drupal\user\UserInterface $account
 *   User account object of the authorized user.
 * @param array $context
 *   An associative array with context information:
 *   - tokens:         An array of tokens.
 *   - user_data:      An array of user and session data.*
 *   - plugin_id:      The plugin identifier.
 *   - sub:            The remote user identifier.
 *
 * @ingroup openid_connect_api
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function grants_profile_openid_connect_post_authorize(UserInterface $account, array $context) {

  // if no adgroups, then add user to HelsinkiProfiili Role
  //  if (!isset($context['user_data']['ad_groups']) || empty($context['user_data']['ad_groups'])) {
  //    \Drupal::logger('helsinki_profiili')
  //      ->info(t('User %s added & assign them a HelsinkiProfiili Role',
  //        ['%s' => $account->getAccountName()]));
  //    $account->addRole('helsinkiprofiili');
  //    $account->save();
  //  }

}


function grants_profile_theme(): array {
  $theme['view_application'] = [
    'render element' => 'build',
    'variables' => [
      'application' => NULL,
      'submission_form' => NULL,
    ],
  ];
  $theme['own_profile'] = [
    'render element' => 'build',
    'variables' => [
      'title' => NULL,
      'content' => NULL,
      'grants_profile_form' => NULL,
      'profile' => NULL,
      'applications' => NULL,
      'colorscheme' => NULL,
      'initials' => NULL,
    ],
  ];
  $theme['company_select'] = [
    'render element' => 'build',
    'variables' => [
      'content' => NULL,
      'company_select_form' => NULL,
    ],
  ];
  $theme['own_addresses'] = [
    'render element' => 'build',
    'variables' => [
      'addresses' => NULL,
    ],
  ];
  $theme['application_officials'] = [
    'render element' => 'build',
    'variables' => [
      'officials' => NULL,
    ],
  ];
  $theme['bank_accounts'] = [
    'render element' => 'build',
    'variables' => [
      'bank_accounts' => NULL,
    ],
  ];
  $theme['block__grants_profile_menuitem'] = [
    'render element' => 'build',
    'template' => 'block--grants-profile-menuitem',
    'base hook' => 'block',
    'variables' => [
      'initials' => NULL,
      'notifications' => NULL,
    ],
  ];
  return $theme;
}


/**
 * Implements hook_cron().
 */
function grants_profile_cron() {

  /** @var \Drupal\Core\File\FileSystem $fileSystem */
  $fileSystem = \Drupal::service('file_system');

  $files = $fileSystem->scanDirectory(DRUPAL_ROOT.'/public/sites/default/files/private/grants_profile', '(.*?)');

  foreach ($files as $uri => $file) {

    /** @var \Drupal\file\FileInterface[] $loadedFiles */
    $loadedFiles = \Drupal::entityTypeManager()
      ->getStorage('file')
      ->loadByProperties(['uri' => $uri]);
    /** @var \Drupal\file\FileInterface|null $loadedFile */
    $loadedFile = reset($loadedFiles) ?: NULL;

    if ($loadedFile) {
      $loadedFile->delete();
    } else {
      unlink($uri);
    }
  }
}
