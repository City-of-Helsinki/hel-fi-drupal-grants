<?php

/**
 * @file
 * Provides an example of a webform handler.
 */


use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Link;
use \Drupal\Core\Form\FormStateInterface;
use Drupal\grants_handler\ApplicationHandler;
use Drupal\grants_handler\Plugin\WebformElement\CompensationsComposite;
use Drupal\grants_handler\Plugin\WebformHandler\GrantsHandler;

/**
 * Implements hook_theme().
 */
function grants_handler_theme() {
  return [
    'webform_handler_grants_summary' => [
      'variables' => ['settings' => NULL, 'handler' => []],
    ],
    'webform_submission_messages' => [
      'variables' => [
        'messages' => NULL,
        'message_form' => NULL,
        'submission' => NULL,
      ],
    ],
    'webform_submission_message_attachments' => [
      'variables' => [
        'attachments_to_print' => NULL,
        'attachments' => NULL,
      ],
    ],
    'webform_submission_events' => [
      'variables' => [
        'submission' => NULL,
      ],
    ],
    'webform_submission_status_history' => [
      'variables' => [
        'submission' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_entity_type_alter().
 */
function grants_handler_entity_type_alter(array &$entity_types) {
  // Add our custom handler for webform
  $entity_types['webform_submission']->setStorageClass('Drupal\grants_handler\GrantsHandlerSubmissionStorage');
}

/**
 * Alter webform elements.
 *
 * @param array $element
 *   Webform specific element properties include:
 *   - #webform: The element's parent webform ID.
 *   - #webform_submission: The element's related webform submission ID.
 *   - #webform_id: The element's unique webform key.
 *   - #webform_key: The element's webform key/name.
 *   - #webform_parent_key: The element's parent key/name.
 *   - #webform_parent_flexbox: TRUE if the element's parent is a
 *     flexbox container.
 *   - #webform_depth: The depth level of the element in the form's
 *     tree hierarchy.
 *   - #webform_children: An array of child element keys/names.
 *   - #webform_multiple: TRUE if element stores multiple values.
 *   - #webform_composite: TRUE if element stores composite values.
 *   - #webform_parents: An array containing the element's parent keys/names.
 *
 *   Webform specific composite sub-element properties include:
 *   - #webform_composite_id: The composite sub-element's ID.
 *   - #webform_composite_key: The composite sub-element's parent key and
 *     element key.
 *   - #webform_composite_parent_key: The composite sub-element's parent key.
 *
 *   Sub-element's can have properties defined using #SUB_ELEMENT__PROPERTY.
 *   For example, an other element's placeholder can be defined using
 *   the #other__placeholder property.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 * @param array $context
 *   An associative array containing the following key-value pairs:
 *   - form: The form structure to which elements is being attached.
 *
 * @see \Drupal\webform\WebformSubmissionForm::prepareElements()
 * @see hook_webform_element_ELEMENT_TYPE_alter()
 */
function grants_handler_webform_element_alter(array &$element, \Drupal\Core\Form\FormStateInterface $form_state, array $context) {
  // Code here acts on all elements included in a webform.
  /** @var \Drupal\webform\WebformSubmissionForm $form_object */
  $form_object = $form_state->getFormObject();
  if ($element['#type'] == 'webform_multiple') {
    if (isset($element['#multiple__header']) && $element['#multiple__header'] === TRUE) {
      $element['#wrapper_attributes']['class'][] = 'table-layout-form';
    } else {
      $element['#wrapper_attributes']['class'][] = 'hidden-head';
    }
  }
  if (get_class($form_object) == 'Drupal\webform\WebformSubmissionForm') {
    /** @var \Drupal\webform\WebformSubmissionInterface $webform_submission */
    $webformSubmission = $form_object->getEntity();
    /** @var \Drupal\webform\WebformInterface $webform */
    $webform = $webformSubmission->getWebform();
    // Get data from webform.
    $webformData = $webformSubmission->getData();

    if (isset($element['#webform_key']) && $element['#webform_key'] == 'olemme_saaneet_muita_avustuksia') {
      if (empty($webformData["myonnetty_avustus"])) {
        $element['#default_value'] = 'Ei';
      }
      else {
        $element['#default_value'] = 'Kyllä';
      }
    }
    if (isset($element['#webform_key']) && $element['#webform_key'] == 'olemme_hakeneet_avustuksia_muualta_kuin_helsingin_kaupungilta') {
      if (empty($webformData["haettu_avustus_tieto"])) {
        $element['#default_value'] = 'Ei';
      }
      else {
        $element['#default_value'] = 'Kyllä';
      }
    }

    // For some reason, this is only place I've found to do this.
    if (isset($element['#webform_key']) && $element['#webform_key'] == 'subventions') {
      // Get form values.
      $formValues = $form_state->getValues();
      // Get names from composite.
      $typeNames = CompensationsComposite::getOptionsForTypes();
      // Get subvention types from settings form.
      $subventionTypes = $element['#subventionType'];
      // Set element cardinality to match whatever is selected in
      $element['#cardinality'] = $subventionTypes ? count($subventionTypes) : -1;


      $defaultValues = [];
      // get items either from form values or from loaded data
      $inputItems = ($formValues["subventions"] ?? isset($webformData['subventions'])) ? $webformData['subventions'] : [];
      foreach ($subventionTypes as $id => $typeId) {
        $itemFound = 'notfound';
        // If this item is not already been added to user input array
        foreach ($inputItems as $sKey => $sItem) {
          if ($sItem['subventionType'] == (string) $id) {
            $itemFound = $sKey;
          }
        }
        // then we set default values to contain type id + name.
        if ($itemFound == 'notfound') {
          $defaultValues[] = [
            'subventionTypeTitle' => $typeNames[$typeId],
            'subventionType' => $typeId,
          ];
        }
        // But if we have either form data or saved data, let's use that.
        else {
          if (isset($inputItems[$itemFound])) {
            $value = $inputItems[$itemFound];
            $value['subventionTypeTitle'] = $typeNames[$typeId];
            $defaultValues[] = $value;
          }
        }
      }
      // SET values.
      $element['#default_value'] = $defaultValues;
    }

    if (
      isset($webformData['status']) &&
      !ApplicationHandler::isSubmissionEditable(NULL, $webformData['status']) &&
      $element['#type'] != 'webform_actions') {
      $element['#disabled'] = TRUE;
    }
    else {
      if (!isset($webformData['status'])) {
        if (isset($element['#webform_key']) && $element['#webform_key'] == 'status') {
          $element['#default_value'] = 'DRAFT';
        }
      }
    }

    // Hacky fix for issues with camelCase keys with Custom component keys.
    // Set issuerName value to issuer_name field and unset camelCase.
    if (isset($element['#webform_key']) && ($element['#webform_key'] == 'myonnetty_avustus' || $element['#webform_key'] == 'haettu_avustus_tieto')) {
      $newValues = [];
      if (isset($element["#default_value"])) {
        foreach ($element["#default_value"] as $key => $default) {
          $new = $default;
          if (isset($default['issuerName'])) {
            $new['issuer_name'] = $default['issuerName'];
            unset($new['issuerName']);
          }
          $newValues[] = $new;
        }
      }
      $element["#default_value"] = $newValues;
    }

    // for some reason this selection cannot be done in address composite class.
    // so we'll need to hack this here.
    // @todo Can the composite default value be added here?
    if (isset($element['#webform_key']) && ($element['#webform_key'] == 'community_address')) {

      /** @var \Drupal\grants_profile\GrantsProfileService $grantsProfileService */
      $grantsProfileService = \Drupal::service('grants_profile.service');

      $selectedCompany = $grantsProfileService->getSelectedCompany();
      $profileData = $grantsProfileService->getGrantsProfileContent($selectedCompany);

      if (isset($element['#default_value'])) {
        $formValues = $element['#default_value'];
        $formSelection = $formValues['community_street'] . ', ' .
          $formValues['community_post_code'] . ', ' .
          $formValues['community_city'] . ', ' .
          $formValues['community_country'];

        $defaultDelta = '0';

        foreach ($profileData['addresses'] as $delta => $address) {
          $deltaString = (string) $delta;
          $optionSelection = $address['street'] . ', ' . $address['postCode'] .
            ', ' . $address['city'] . ', ' . $address['country'];

          if ($formSelection == $optionSelection) {
            $defaultDelta = $deltaString;
          }
        }
        $element["#default_value"]["community_address_select"] = $defaultDelta;
      }
    }

    // for some reason this selection cannot be done in official composite class.
    // so we'll need to hack this here.
    // @todo Can the composite default value be added here?
    if (isset($element['#webform_key']) && ($element['#webform_key'] == 'community_officials')) {

      /** @var \Drupal\grants_profile\GrantsProfileService $grantsProfileService */
      $grantsProfileService = \Drupal::service('grants_profile.service');

      $selectedCompany = $grantsProfileService->getSelectedCompany();
      $profileData = $grantsProfileService->getGrantsProfileContent($selectedCompany);

      $defaultDelta = '0';

      if (isset($element['#default_value'])) {
        foreach ($element['#default_value'] as $delta => $official) {
          $valueName = $official['name'];

          foreach ($profileData['officials'] as $profileDelta => $profileOfficial) {
            $deltaString = (string) $profileDelta;

            if ($valueName == $profileOfficial['name']) {
              $defaultDelta = $deltaString;
            }
          }
          $element['#default_value'][$delta]['community_officials_select'] = $defaultDelta;
        }
      }
    }

    if (isset($element['#webform_key']) && ($element['#webform_key'] == 'community_practices_business')) {
      if (isset($webformData["community_practices_business"])) {
        $element['#default_value'] = $webformData["community_practices_business"];
      }
    }
  }
}

/**
 * @param $array
 *   Array being manipulated.
 * @param $value
 *   Imported value for the array.
 * @param bool $show_checkmark
 *   Is the checkmark visible.
 */
function _grants_handler_imported_handler(
  mixed &$array,
        $value,
  bool  $show_checkmark = TRUE) {

  if (!is_array($array)) {
    return;
  }

  $array["#value"] = $value;
  $array['#attributes'] = ['readonly' => 'readonly', 'style' => 'display:none'];
  $array['#description'] = \Drupal\Core\Field\FieldFilteredMarkup::create($show_checkmark ? $value .
    ' <span aria-hidden="true" class="hds-icon hds-icon--check-circle-fill hds-icon--size-s"></span>' : $value);
  $array['#wrapper_attributes']['class'][] = 'grants-handler--prefilled-field';
  if ($show_checkmark === FALSE) {
    $array['#field_suffix'] = '<a class="hds-link hds-link--medium" style="display:inline-block;" href="/grants-profile/">
            <span aria-hidden="true" class="hds-icon hds-icon--pen-line hds-icon--size-s"></span><span class="link-label">'.t('Edit').'</span>
          </a>';
  }

}

/**
 * @param array $element
 *   The element in question.
 * @param string $str1
 *   Header of the alert notification.
 * @param string $str2
 *   Link text.
 * @param string $str3
 *   Clarifying text.
 */
function _grants_handler_missing_data(
  array  &$element,
  string $str1 = 'Field is missing.',
  string $str2 = 'Go to grants profile',
  string $str3 = 'to fill out missing data.') {

  unset($element['#value']);
  unset($element['#default_value']);
  $element['#required'] = TRUE;
  $element['#attributes'] = [
    'required' => 'required',
    'readonly' => 'readonly',
    'style' => 'display:none',
  ];
  $element['#description'] = '
  <section aria-label="Notification" class="hds-notification hds-notification--alert">
    <div class="hds-notification__content">
      <div class="hds-notification__label" role="heading" aria-level="2">
        <span class="hds-icon hds-icon--alert-circle-fill" aria-hidden="true"></span>
        <span>' . $str1 . '</span>
      </div>
      <div class="hds-notification__body">' . Link::createFromRoute($str2, 'grants_profile.show')
      ->toString() . ' ' . $str3 . '</div>
    </div>
  </section>
  ';
}

/**
 * Implements hook_form_alter().
 */
function grants_handler_webform_submission_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  /** @var \Drupal\grants_profile\GrantsProfileService $grantsProfileService */
  $grantsProfileService = \Drupal::service('grants_profile.service');
  $selectedCompany = $grantsProfileService->getSelectedCompany();

  $form['#attached']['library'][] = 'grants_handler/webform-additions';

  //  $form["actions"]["draft"]['#disabled'] = TRUE;

  if ($selectedCompany != NULL) {

    if (
      isset($form["elements"]["1_hakijan_tiedot"]["status"]["#default_value"]) &&
      !ApplicationHandler::isSubmissionEditable(NULL, $form["elements"]["1_hakijan_tiedot"]["status"]["#default_value"])
    ) {
      $form["actions"]["submit"]['#disabled'] = TRUE;
    }

    $grantsProfile = $grantsProfileService->getGrantsProfileContent($selectedCompany);

    // pass variable to Drupal.Settings
    $form['#attached']['drupalSettings']['grants_handler']['grantsProfile'] = $grantsProfile;

    if ($grantsProfile["businessPurpose"]) {
      _grants_handler_imported_handler($form["elements"]["3_yhteison_tiedot"]["business_info"]["community_purpose"], $grantsProfile["businessPurpose"], FALSE);
    }
    else {
      _grants_handler_missing_data($form["elements"]["3_yhteison_tiedot"]["business_info"]["community_purpose"],
        t('Avustushakemukselle tarvitaan kuvaus yhdistyksen toiminnasta.'), t('Lisää toiminnan kuvaus'),
        t('Oma asiointi > Omat tiedot -osioon, jotta sitä voidaan käyttää tällä hakemuksella.'));
    }

    if (isset($form["elements"]["1_hakijan_tiedot"]["tilinumero"]["account_number"]["#default_value"])) {
      $form["elements"]["1_hakijan_tiedot"]["tilinumero"]["account_number_select"]["#default_value"] = $form["elements"]["1_hakijan_tiedot"]["tilinumero"]["account_number"]["#default_value"];
    }

    $infoelement = [
      'omat_tiedot_page_infobox' => [
        '#markup' => '
  <section aria-label="Notification" class="hds-notification">
    <div class="hds-notification__content">
      <div class="hds-notification__label" role="heading" aria-level="2">
        <span class="hds-icon hds-icon--info-circle-fill" aria-hidden="true"></span>
        <span>' . t('Some information fetched from personal information') . '</span>
      </div>
      <div class="hds-notification__body">
        ' . t('Check the information on the form before sending the application. You can change your own information from personal information section of the site.') . '
      </div>
    </div>
  </section>
  ',
      ],
    ];
    $required_fields_info_element = [
      'required_fields_infobox' => [
        '#markup' => '
  <section aria-label="Notification" class="hds-notification">
    <div class="hds-notification__content">
      <div class="hds-notification__label" role="heading" aria-level="2">
        <span class="hds-icon hds-icon--info-circle-fill" aria-hidden="true"></span>
        <span>' . t('Fields marked with an asterisk * are required, that need to be filled before saving.') . '</span>
      </div>
    </div>
  </section>
  ',
      ],
    ];
    if (array_key_exists('1_hakijan_tiedot', $form['elements']) && is_array($form['elements']['1_hakijan_tiedot'])) {
      $form['elements']['1_hakijan_tiedot'] = array_merge($required_fields_info_element, $form['elements']['1_hakijan_tiedot']);
      $form['elements']['1_hakijan_tiedot'] = array_merge($infoelement, $form['elements']['1_hakijan_tiedot']);

      _grants_handler_imported_handler($form["elements"]["1_hakijan_tiedot"]["yhteiso_jolle_haetaan_avustusta"]["community_official_name"], $grantsProfile["companyName"]);
      _grants_handler_imported_handler($form["elements"]["1_hakijan_tiedot"]["yhteison_lyhenne"]["community_official_name_short"], $grantsProfile["companyNameShort"], FALSE);

      $regDate = new DrupalDateTime($grantsProfile["registrationDate"], 'Europe/Helsinki');

      _grants_handler_imported_handler($form["elements"]["1_hakijan_tiedot"]["yhteiso_jolle_haetaan_avustusta"]['grants_profile__items_container']["registration_date"], $regDate->format('d.m.Y'));
      _grants_handler_imported_handler($form["elements"]["1_hakijan_tiedot"]["yhteiso_jolle_haetaan_avustusta"]['grants_profile__items_container']["company_number"], $selectedCompany);

      _grants_handler_imported_handler($form["elements"]["1_hakijan_tiedot"]["perustamisvuosi"]["founding_year"], $grantsProfile["foundingYear"], FALSE);

      _grants_handler_imported_handler($form["elements"]["1_hakijan_tiedot"]["yhteiso_jolle_haetaan_avustusta"]['grants_profile__items_container']["home"], $grantsProfile["companyHome"]);

      _grants_handler_imported_handler($form["elements"]["1_hakijan_tiedot"]["yhteiso_jolle_haetaan_avustusta"]['grants_profile__items_container']["community_status"], $grantsProfile["companyStatus"]);
      _grants_handler_imported_handler($form["elements"]["1_hakijan_tiedot"]["yhteiso_jolle_haetaan_avustusta"]['grants_profile__items_container']["community_status_special"], $grantsProfile["companyStatusSpecial"]);

      _grants_handler_imported_handler($form["elements"]["1_hakijan_tiedot"]["verkkosivut"]["homepage"], $grantsProfile["companyHomePage"], FALSE);

    }
    if (array_key_exists('2_avustustiedot', $form['elements']) && is_array($form['elements']['2_avustustiedot'])) {
      $form['elements']['2_avustustiedot'] = array_merge($required_fields_info_element, $form['elements']['2_avustustiedot']);
    }
    if (array_key_exists('3_yhteison_tiedot', $form['elements']) && is_array($form['elements']['3_yhteison_tiedot'])) {
      $form['elements']['3_yhteison_tiedot'] = array_merge($required_fields_info_element, $form['elements']['3_yhteison_tiedot']);
      $form['elements']['3_yhteison_tiedot'] = array_merge($infoelement, $form['elements']['3_yhteison_tiedot']);
    }
    if (array_key_exists('lisatiedot_ja_liitteet', $form['elements']) && is_array($form['elements']['lisatiedot_ja_liitteet'])) {
      $form['elements']['lisatiedot_ja_liitteet'] = array_merge($required_fields_info_element, $form['elements']['lisatiedot_ja_liitteet']);
    }


  }
  else {
    \Drupal::messenger()
      ->addError(t("You don't have company selected, no fields are prepopulated"));
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function grants_handler_preprocess_webform_submission_data(&$variables) {
  // get submission object
  /** @var \Drupal\webform\Entity\WebformSubmission $submission */
  $submission = $variables['webform_submission'];
  $data = $submission->getData();

  if (isset($data["application_number"])) {
    $variables['applicationNumber'] = $data["application_number"];
  }
  if (isset($data["business_purpose"])) {
    $variables["elements"]["data"]["3_yhteison_tiedot"]["#element"]["business_info"]["community_purpose"] = $data["business_purpose"];
  }

  $variables["elements"]["data"]["lisatiedot_ja_liitteet"]["#element"]
  ["liitteet"]["talousarvio"]["#webform_composite_elements"]["attachmentName"] = 'ASDF ASDFASDFASDFASDFASDFASDF';


  // parse messages
  $variables['messages'] = [
    '#theme' => 'webform_submission_messages',
    '#submission' => $submission,
  ];

  // parse events
  $variables['events'] = [
    '#theme' => 'webform_submission_events',
    '#submission' => $submission,
  ];

  // parse history
  $variables['history'] = [
    '#theme' => 'webform_submission_status_history',
    '#submission' => $submission,
  ];;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @throws \Exception
 */
function grants_handler_preprocess_webform_submission_messages(&$variables) {

  $submission = $variables['submission'];
  $submissionData = $submission->getData();

  // if submission is ok for messaging
  if (ApplicationHandler::isSubmissionMessageable($submission, NULL)) {
    // add message form
    $variables['message_form'] = \Drupal::formBuilder()
      ->getForm('Drupal\grants_handler\Form\MessageForm', $submission);
  }

  $messages = [];
  if (isset($submissionData['messages']) && is_array($submissionData['messages'])) {
    foreach ($submissionData['messages'] as $message) {
      $dt = new \DateTime($message['sendDateTime']);
      $dt->setTimezone(new \DateTimeZone('Europe/Helsinki'));

      $build = [
        '#theme' => 'webform_submission_message_attachments',
        '#attachments' => $message['attachments'] ?? [],
      ];

      $messages[] = [
        'date' => $dt->format('d.m.Y h:i:s'),
        'sender' => $message['sentBy'],
        'body' => $message['body'] ?? '',
        'attachments' => isset($message['attachments']) ? \Drupal::service('renderer')
          ->render($build) : '',
      ];
    }
  }

  $table = [
    '#type' => 'table',
    '#header' => [
      'date' => t('Date'),
      'sender' => t('Application #'),
      'body' => t('Message'),
      'attachments' => t('Attachments'),
    ],
    '#rows' => $messages,
    '#empty' => t('No messages has been found.'),
    '#attributes' => [
      'class' => ['message-table'],
    ],
  ];

  $variables['messages'] = $table;


}


/**
 * Implements hook_preprocess_HOOK().
 *
 * @throws \Exception
 */
function grants_handler_preprocess_webform_submission_status_history(&$variables) {

  $submission = $variables['submission'];
  $submissionData = $submission->getData();

  $history = [];
  if (isset($submissionData["status_updates"]) && is_array($submissionData["status_updates"])) {
    foreach (array_reverse($submissionData["status_updates"]) as $event) {
      $history[] = [
        'date' => '12.04.2021 14:54:32',
        'citizenCaseStatus' => $event['citizenCaseStatus'],
        'eventSource' => $event['eventSource'] ?? '',
      ];
    }
  }


  $table = [
    '#type' => 'table',
    '#header' => [
      'date' => t('Date'),
      'citizenCaseStatus' => t('Status'),
      'eventSource' => t('Source'),
    ],
    '#rows' => $history,
    '#empty' => t('No status updates has been found.'),
  ];

  $variables['history'] = $table;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @throws \Exception
 */
function grants_handler_preprocess_webform_submission_events(&$variables) {

  $submission = $variables['submission'];
  $submissionData = $submission->getData();

  $events = [];
  if (isset($submissionData['events']) && is_array($submissionData['events'])) {
    foreach ($submissionData['events'] as $event) {
      $events[] = [
        'date' => '12.04.2021 14:54:32',
        'eventSource' => $event['eventSource'],
        'eventDescription' => $event['eventDescription'] ?? '',
      ];
    }

  }

  $table = [
    '#type' => 'table',
    '#header' => [
      'date' => t('Date'),
      'eventSource' => t('Source'),
      'eventDescription' => t('Description'),
    ],
    '#rows' => $events,
    '#empty' => t('No events has been found.'),
  ];

  $variables['events'] = $table;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @throws \Exception
 */
function grants_handler_preprocess_webform_submission_message_attachments(&$variables) {

  $submissionAttachments = $variables['attachments'];

  $events = [];
  if (isset($submissionAttachments) && is_array($submissionAttachments)) {
    foreach ($submissionAttachments as $attachment) {
      $events[] = [
        'fileName' => $attachment['fileName'],
        'description' => $attachment['description'],
      ];
    }

  }

  $table = [
    '#type' => 'table',
    //    '#header' => [
    //      'fileName' => t('File name'),
    //      'description' => t('Description'),
    //    ],
    '#rows' => $events,
    //    '#empty' => t('No attachments has been found.'),
  ];

  $variables['attachments_to_print'] = $table;
}

function grants_handler_preprocess_webform_progress_bar($variables) {


  $d = 'asdf';
}