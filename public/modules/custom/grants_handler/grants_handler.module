<?php

/**
 * @file
 * Provides an example of a webform handler.
 */


use Drupal\Core\Datetime\DrupalDateTime;
use \Drupal\Core\Form\FormStateInterface;
use Drupal\grants_handler\Plugin\WebformElement\CompensationsComposite;
use Drupal\helfi_yjdh\Exception\YjdhException;

/**
 * Implements hook_theme().
 */
function grants_handler_theme() {
  return [
    'webform_handler_grants_summary' => [
      'variables' => ['settings' => NULL, 'handler' => []],
    ],
  ];
}

/**
 * Implements hook_entity_type_alter().
 */
function grants_handler_entity_type_alter(array &$entity_types) {
  // Add our custom handler for webform
  $entity_types['webform_submission']->setStorageClass('Drupal\grants_handler\GrantsHandlerSubmissionStorage');
}

/**
 * Alter webform elements.
 *
 * @param array $element
 *   Webform specific element properties include:
 *   - #webform: The element's parent webform ID.
 *   - #webform_submission: The element's related webform submission ID.
 *   - #webform_id: The element's unique webform key.
 *   - #webform_key: The element's webform key/name.
 *   - #webform_parent_key: The element's parent key/name.
 *   - #webform_parent_flexbox: TRUE if the element's parent is a
 *     flexbox container.
 *   - #webform_depth: The depth level of the element in the form's
 *     tree hierarchy.
 *   - #webform_children: An array of child element keys/names.
 *   - #webform_multiple: TRUE if element stores multiple values.
 *   - #webform_composite: TRUE if element stores composite values.
 *   - #webform_parents: An array containing the element's parent keys/names.
 *
 *   Webform specific composite sub-element properties include:
 *   - #webform_composite_id: The composite sub-element's ID.
 *   - #webform_composite_key: The composite sub-element's parent key and
 *     element key.
 *   - #webform_composite_parent_key: The composite sub-element's parent key.
 *
 *   Sub-element's can have properties defined using #SUB_ELEMENT__PROPERTY.
 *   For example, an other element's placeholder can be defined using
 *   the #other__placeholder property.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 * @param array $context
 *   An associative array containing the following key-value pairs:
 *   - form: The form structure to which elements is being attached.
 *
 * @see \Drupal\webform\WebformSubmissionForm::prepareElements()
 * @see hook_webform_element_ELEMENT_TYPE_alter()
 */
function grants_handler_webform_element_alter(array &$element, \Drupal\Core\Form\FormStateInterface $form_state, array $context) {
  // Code here acts on all elements included in a webform.
  /** @var \Drupal\webform\WebformSubmissionForm $form_object */
  $form_object = $form_state->getFormObject();

  if (get_class($form_object) == 'Drupal\webform\WebformSubmissionForm') {
    /** @var \Drupal\webform\WebformSubmissionInterface $webform_submission */
    $webformSubmission = $form_object->getEntity();
    /** @var \Drupal\webform\WebformInterface $webform */
    $webform = $webformSubmission->getWebform();
    // Get data from webform.
    $webformData = $webformSubmission->getData();

    if (isset($element['#webform_key']) && $element['#webform_key'] == 'olemme_saaneet_muita_avustuksia') {
      if (empty($webformData["myonnetty_avustus"])) {
        $element['#default_value'] = 'Ei';
      }
      else {
        $element['#default_value'] = 'Kyllä';
      }
    }
    if (isset($element['#webform_key']) && $element['#webform_key'] == 'olemme_hakeneet_avustuksia_muualta_kuin_helsingin_kaupungilta') {
      if (empty($webformData["haettu_avustus_tieto"])) {
        $element['#default_value'] = 'Ei';
      }
      else {
        $element['#default_value'] = 'Kyllä';
      }
    }

    // For some reason, this is only place I've found to do this.
    if (isset($element['#webform_key']) && $element['#webform_key'] == 'subventions') {
      // Get form values.
      $formValues = $form_state->getValues();
      // Get names from composite.
      $typeNames = CompensationsComposite::getOptionsForTypes();
      // Get subvention types from settings form.
      $subventionTypes = $element['#subventionType'];
      // Set element cardinality to match whatever is selected in
      $element['#cardinality'] = count($subventionTypes);


      $defaultValues = [];
      // get items either from form values or from loaded data
      $inputItems = ($formValues["subventions"] ?? isset($webformData['subventions'])) ? $webformData['subventions'] : [];
      foreach ($subventionTypes as $id => $typeId) {
        $itemFound = 'notfound';
        // If this item is not already been added to user input array
        foreach ($inputItems as $sKey => $sItem) {
          if ($sItem['subventionType'] == (string) $id) {
            $itemFound = $sKey;
          }
        }
        // then we set default values to contain type id + name.
        if ($itemFound == 'notfound') {
          $defaultValues[] = [
            'subventionTypeTitle' => $typeNames[$typeId],
            'subventionType' => $typeId,
          ];
        }
        // But if we have either form data or saved data, let's use that.
        else {
          if (isset($inputItems[$itemFound])) {
            $value = $inputItems[$itemFound];
            $value['subventionTypeTitle'] = $typeNames[$typeId];
            $defaultValues[] = $value;
          }
        }
      }
      // SET values.
      $element['#default_value'] = $defaultValues;
    }

  }

}

/**
 * Implements hook_preprocess().
 */
function grants_handler_preprocess_webform(array &$variables) {
  /** @var \Drupal\grants_profile\GrantsProfileService $grantsProfileService */
  $grantsProfileService = \Drupal::service('grants_profile.service');
  $selectedCompany = $grantsProfileService->getSelectedCompany();

  if ($selectedCompany == NULL) {
    \Drupal::messenger()
      ->addError(t('You need to select company you\'re acting behalf of.'));
    $url = \Drupal\Core\Url::fromRoute('grants_profile.show')
      ->setAbsolute()
      ->toString();
    $response = new \Symfony\Component\HttpFoundation\RedirectResponse($url);
    $response->send();
  }
}

/**
 * Implements hook_form_alter().
 */
function grants_handler_webform_submission_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  /** @var \Drupal\grants_profile\GrantsProfileService $grantsProfileService */
  $grantsProfileService = \Drupal::service('grants_profile.service');
  $selectedCompany = $grantsProfileService->getSelectedCompany();

  if ($selectedCompany != NULL) {

    $grantsProfile = $grantsProfileService->getGrantsProfileContent($selectedCompany);

    $form["elements"]["1_hakijan_tiedot"]["yhteiso_jolle_haetaan_avustusta"]["company_number"]["#value"] = $selectedCompany;
    $form["elements"]["1_hakijan_tiedot"]["yhteiso_jolle_haetaan_avustusta"]["community_official_name"]["#value"] = $grantsProfile["companyName"];

    $regDate = new DrupalDateTime($grantsProfile["registrationDate"], 'Europe/Helsinki');

    $form["elements"]["1_hakijan_tiedot"]["yhteiso_jolle_haetaan_avustusta"]["registration_date"]["#value"] = $regDate->format('d.m.Y');

    $foundingYearExplode = explode('-', $grantsProfile["registrationDate"]);
    $form["elements"]["1_hakijan_tiedot"]["yhteiso_jolle_haetaan_avustusta"]["founding_year"]["#value"] = $foundingYearExplode[0];

    $form["elements"]["1_hakijan_tiedot"]["yhteiso_jolle_haetaan_avustusta"]["home"]["#value"] = $grantsProfile["companyHome"];

    $form["elements"]["1_hakijan_tiedot"]["yhteiso_jolle_haetaan_avustusta"]["community_status"]["#value"] = $grantsProfile["companyStatus"];
    $form["elements"]["1_hakijan_tiedot"]["yhteiso_jolle_haetaan_avustusta"]["community_status_special"]["#value"] = $grantsProfile["companyStatusSpecial"];
  }
  else {
    \Drupal::messenger()
      ->addError(t("You don't have company selected, no fields are prepopulated"));
  }
}
