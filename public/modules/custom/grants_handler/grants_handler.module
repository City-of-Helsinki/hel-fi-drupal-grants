<?php

/**
 * @file
 * Provides an example of a webform handler.
 */


use Drupal\Core\Datetime\DrupalDateTime;
use \Drupal\Core\Form\FormStateInterface;
use Drupal\grants_handler\Plugin\WebformElement\CompensationsComposite;
use Drupal\helfi_yjdh\Exception\YjdhException;

/**
 * Implements hook_theme().
 */
function grants_handler_theme() {
  return [
    'webform_handler_grants_summary' => [
      'variables' => ['settings' => NULL, 'handler' => []],
    ],
  ];
}

/**
 * Implements hook_entity_type_alter().
 */
function grants_handler_entity_type_alter(array &$entity_types) {
  // Add our custom handler for webform
  $entity_types['webform_submission']->setStorageClass('Drupal\grants_handler\GrantsHandlerSubmissionStorage');
}

/**
 * Alter webform elements.
 *
 * @param array $element
 *   Webform specific element properties include:
 *   - #webform: The element's parent webform ID.
 *   - #webform_submission: The element's related webform submission ID.
 *   - #webform_id: The element's unique webform key.
 *   - #webform_key: The element's webform key/name.
 *   - #webform_parent_key: The element's parent key/name.
 *   - #webform_parent_flexbox: TRUE if the element's parent is a
 *     flexbox container.
 *   - #webform_depth: The depth level of the element in the form's
 *     tree hierarchy.
 *   - #webform_children: An array of child element keys/names.
 *   - #webform_multiple: TRUE if element stores multiple values.
 *   - #webform_composite: TRUE if element stores composite values.
 *   - #webform_parents: An array containing the element's parent keys/names.
 *
 *   Webform specific composite sub-element properties include:
 *   - #webform_composite_id: The composite sub-element's ID.
 *   - #webform_composite_key: The composite sub-element's parent key and
 *     element key.
 *   - #webform_composite_parent_key: The composite sub-element's parent key.
 *
 *   Sub-element's can have properties defined using #SUB_ELEMENT__PROPERTY.
 *   For example, an other element's placeholder can be defined using
 *   the #other__placeholder property.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 * @param array $context
 *   An associative array containing the following key-value pairs:
 *   - form: The form structure to which elements is being attached.
 *
 * @see \Drupal\webform\WebformSubmissionForm::prepareElements()
 * @see hook_webform_element_ELEMENT_TYPE_alter()
 */
function grants_handler_webform_element_alter(array &$element, \Drupal\Core\Form\FormStateInterface $form_state, array $context) {
  // Code here acts on all elements included in a webform.
  //  /** @var \Drupal\webform\WebformSubmissionForm $form_object */
//    $form_object = $form_state->getFormObject();
  //  /** @var \Drupal\webform\WebformSubmissionInterface $webform_submission */
//    $webform_submission = $form_object->getEntity();
  //  /** @var \Drupal\webform\WebformInterface $webform */
//    $webform = $webform_submission->getWebform();

  // Add custom data attributes to all elements.
//   $element['#attributes']['data-custom'] = '{custom data goes here}';


//  if (isset($element['#webform_key']) && $element['#webform_key'] == 'subventions') {
//    /** @var \Drupal\webform\Entity\WebformSubmission $WfSubmission */
//    $WfSubmission = $form_state->getFormObject()->getEntity();
//    $formInput = $form_state->getUserInput();
//
//    $typeNames = CompensationsComposite::getOptionsForTypes();
//    $subventionTypes = $element['#subvention_type'];
//    if ($WfSubmission->isNew()) {
//      $defaultValues = [];
//      $inputItems = $formInput["subventions"]["items"] ?? [];
//      foreach ($subventionTypes as $id => $typeId) {
//        $itemFound = FALSE;
//        // If this item is not already been added to user input array
//        foreach ($inputItems as $sKey => $sItem) {
//          if (isset($sItem['_item_']) && $sItem['_item_']['subventionType'] == (string)$id) {
//            $itemFound = $sKey;
//          }
//        }
//        // then we want to add default values.
//        if ($itemFound == FALSE) {
//          $defaultValues[] = [
//            'subventionTypeTitle' => $typeNames[$id],
//            'subventionType' => $typeId,
//            'amount' => ''
//          ];
//        } else {
//          $defaultValues = $inputItems[$itemFound]['_item_'];
//          $d = 'asdf';
//        }
//
//      }
//      $element['#default_value'] = $defaultValues;
//    }
//    else {
//      $added = [];
//      $defaultValues = [];
//      foreach ($element['#default_value'] as $key => $value) {
//        if(!isset($element['#default_value'][$key]['subventionTypeTitle'])){
//          $element['#default_value'][$key]['subventionTypeTitle'] = $typeNames[$value['subventionType']];
//        }
//        $added[] = $value['subventionType'];
//      }
//      foreach ($subventionTypes as $id => $typeName) {
//        $defaultValues = [
//          'subventionTypeTitle' => $typeNames[$id],
//          'subventionType' => $typeName,
//          'amount' => ''
//        ];
//        if (!in_array($id, $added)) {
//          $element['#default_value'][] = $defaultValues;
//        }
//      }
//    }
//    $d = 'ads';
//  }
}

/**
 * Implements hook_preprocess().
 */
function grants_handler_preprocess_webform(array &$variables) {
  /** @var \Drupal\grants_profile\GrantsProfileService $grantsProfileService */
  $grantsProfileService = \Drupal::service('grants_profile.service');
  $selectedCompany = $grantsProfileService->getSelectedCompany();

  $currentUser = \Drupal::currentUser();

  if ($selectedCompany == NULL && in_array('HelsinkiProfiili',$currentUser->getRoles())) {
    \Drupal::messenger()
      ->addError(t('You need to select company you\'re acting behalf of.'));
    $url = \Drupal\Core\Url::fromRoute('grants_profile.show')->setAbsolute()->toString();
    $response = new \Symfony\Component\HttpFoundation\RedirectResponse($url);
    $response->send();
    return;
  }
}

/**
 * Implements hook_form_alter().
 */
function grants_handler_webform_submission_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  if($form_id === 'webform_submission_yleisavustushakemus_edit_all_form') {
    $d = 'adfs';
  } else if (
    $form_id === 'webform_submission_yleisavustushakemus_add_form') {

    /** @var \Drupal\grants_profile\GrantsProfileService $grantsProfileService */
    $grantsProfileService = \Drupal::service('grants_profile.service');
    $selectedCompany = $grantsProfileService->getSelectedCompany();

    if ($selectedCompany != NULL) {
      $yjdhService = \Drupal::service('helfi_yjdh.client');
      $selectedCompanyData = $yjdhService->getAssociationBasicInfo($selectedCompany);

      $form["elements"]["1_hakijan_tiedot"]["yhteiso_jolle_haetaan_avustusta"]["company_number"]["#value"] = $selectedCompanyData['BusinessId'];
      $form["elements"]["1_hakijan_tiedot"]["yhteiso_jolle_haetaan_avustusta"]["community_official_name"]["#value"] = $selectedCompanyData['AssociationNameInfo'][0]['AssociationName'];

      $regDate = new DrupalDateTime($selectedCompanyData['RegistryDate'], 'Europe/Helsinki');

      $form["elements"]["1_hakijan_tiedot"]["yhteiso_jolle_haetaan_avustusta"]["registration_date"]["#value"] = $regDate->format('d.m.Y');

      $foundingYearExplode = explode('-', $selectedCompanyData['RegistryDate']);
      $form["elements"]["1_hakijan_tiedot"]["yhteiso_jolle_haetaan_avustusta"]["founding_year"]["#value"] = $foundingYearExplode[0];

      $form["elements"]["1_hakijan_tiedot"]["yhteiso_jolle_haetaan_avustusta"]["home"]["#value"] = $selectedCompanyData['Address'][0]['City'];

      $form["elements"]["1_hakijan_tiedot"]["yhteiso_jolle_haetaan_avustusta"]["community_status"]["#value"] = $selectedCompanyData["AssociationStatus"];
      $form["elements"]["1_hakijan_tiedot"]["yhteiso_jolle_haetaan_avustusta"]["community_status_special"]["#value"] = $selectedCompanyData["AssociationSpecialCondition"];
    }
    else {
      \Drupal::messenger()
        ->addError(t("You don't have company selected, no fields are prepopulated"));
    }



  }
}

/**
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *
 * @return array
 */
function company_select_callback(array &$form, FormStateInterface $form_state): array {

  $yjdhService = \Drupal::service('helfi_yjdh.client');
  //  /** @var \Drupal\grants_profile\GrantsProfileService $grantsProfileService */
  //  $grantsProfileService = \Drupal::service('grants_profile.service');

  $formInput = $form_state->getUserInput();

  $selectedCompanyData = $yjdhService->getAssociationBasicInfo($formInput["company_select"]);

  //  $grantsProfileContent = $grantsProfileService->getGrantsProf-ileContent($formInput["company_select"]);

  $form["elements"]["1_hakijan_tiedot"]["yhteiso_jolle_haetaan_avustusta"]["company_number"]["#value"] = $selectedCompanyData['BusinessId'];
  $form["elements"]["1_hakijan_tiedot"]["yhteiso_jolle_haetaan_avustusta"]["community_official_name"]["#value"] = $selectedCompanyData['AssociationNameInfo'][0]['AssociationName'];

  $regDate = new DrupalDateTime($selectedCompanyData['RegistryDate'], 'Europe/Helsinki');

  $form["elements"]["1_hakijan_tiedot"]["yhteiso_jolle_haetaan_avustusta"]["registration_date"]["#value"] = $regDate->format('d.m.Y');

  $foundingYearExplode = explode('-', $selectedCompanyData['RegistryDate']);
  $form["elements"]["1_hakijan_tiedot"]["yhteiso_jolle_haetaan_avustusta"]["founding_year"]["#value"] = $foundingYearExplode[0];

  $form["elements"]["1_hakijan_tiedot"]["yhteiso_jolle_haetaan_avustusta"]["home"]["#value"] = $selectedCompanyData['Address'][0]['City'];

  $form["elements"]["1_hakijan_tiedot"]["yhteiso_jolle_haetaan_avustusta"]["community_status"]["#value"] = $selectedCompanyData["AssociationStatus"];
  $form["elements"]["1_hakijan_tiedot"]["yhteiso_jolle_haetaan_avustusta"]["community_status_special"]["#value"] = $selectedCompanyData["AssociationSpecialCondition"];

  return $form;

}
