diff --git a/core/lib/Drupal/Core/Asset/AssetResolver.php b/core/lib/Drupal/Core/Asset/AssetResolver.php
index 251b9036f3..c20a7a8d4a 100644
--- a/core/lib/Drupal/Core/Asset/AssetResolver.php
+++ b/core/lib/Drupal/Core/Asset/AssetResolver.php
@@ -328,6 +328,11 @@ public function getJsAssets(AttachedAssetsInterface $assets, $optimize, Language
       $this->cache->set($cid, [$js_assets_header, $js_assets_footer, $settings, $settings_in_header], CacheBackendInterface::CACHE_PERMANENT, ['library_info']);
     }

+    // Double check settings, as Drupal might've cached empty settings.
+    if (empty($settings) && \Drupal::requestStack()->getCurrentRequest()->getMethod() == 'POST') {
+      $settings = $this->doubleCheckSettings($assets);
+    }
+
     if ($settings !== FALSE) {
       // Attached settings override both library definitions and
       // hook_js_settings_build().
@@ -365,6 +370,42 @@ public function getJsAssets(AttachedAssetsInterface $assets, $optimize, Language
     ];
   }

+  /*
+   * Double check settings (workaround for enpty settings cache).
+   * This function is a copy/paste of a portion of getJsAssets().
+   *
+   * @see AjaxResponseAttachmentsProcessor::buildAttachmentsCommands()
+   *
+   * @param \Drupal\Core\Asset\AttachedAssetsInterface $assets
+   *   The assets attached to the current response.
+   *   Note that this object is modified to reflect the final JavaScript
+   *   settings assets.
+   *
+   * @return array|bool
+   *   Return attached settings array or False.
+   */
+  public function doubleCheckSettings(AttachedAssetsInterface $assets) {
+    // If the core/drupalSettings library is being loaded or is already
+    // loaded, get the JavaScript settings assets, and convert them into a
+    // single "regular" JavaScript asset.
+    $libraries_to_load = $this->getLibrariesToLoad($assets);
+    $settings_required = in_array('core/drupalSettings', $libraries_to_load) || in_array('core/drupalSettings', $this->libraryDependencyResolver->getLibrariesWithDependencies($assets->getAlreadyLoadedLibraries()));
+    $settings_have_changed = count($libraries_to_load) > 0 || count($assets->getSettings()) > 0;
+
+    // Initialize settings to FALSE since they are not needed by default. This
+    // distinguishes between an empty array which must still allow
+    // hook_js_settings_alter() to be run.
+    $settings = FALSE;
+    if ($settings_required && $settings_have_changed) {
+      $settings = $this->getJsSettingsAssets($assets);
+      // Allow modules to add cached JavaScript settings.
+      $this->moduleHandler->invokeAllWith('js_settings_build', function (callable $hook, string $module) use (&$settings, $assets) {
+        $hook($settings, $assets);
+      });
+    }
+    return $settings;
+  }
+
   /**
    * Sorts CSS and JavaScript resources.
    *
